[{"path":"https://biocro.github.io/BioCroValidation/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 BioCroValidation authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://biocro.github.io/BioCroValidation/articles/BioCroValidation.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Getting Started With BioCroValidation","text":"BioCroValidation R package provides suite tools validating BioCro crop growth models. Validation key part using developing BioCro models. goal package provide convenient “helping” functions aid various aspects model validation, especially parameterization. central tool package objective_function function. name implies, can used create objective function calculates value error metric value given set model parameter values. turn, objective function can passed optimizer. possible BioCro user write customized objective function, creating one can complex process many potential aspects consider: Mathematical / Statistical Approach: refers choices like “want normalize error terms observed value, largest observed value measured quantity?” “want use L1 L2 regularization?” Implementation Mathematical / Statistical Approach: approach identified, code must written properly implement . Error Checks: wide variety strange conditions can occur parameterization, objective function must ready handle . example, objective function respond simulation run completion, optimizer passes NA parameter value? Technical Details: Parameterization can take long time perform, important objective function code efficient fast possible. goal objective_function allow users make key choices mathematical approach using clear code statements like regularization_method = 'L2', implementation details, error checks, technical details handled internally. result clear scripts also reliable. Besides objective_function, package also includes functions similar goal clarifying code hiding implementation details, bounds_table update_model.","code":""},{"path":"https://biocro.github.io/BioCroValidation/articles/BioCroValidation.html","id":"installing-biocrovalidation","dir":"Articles","previous_headings":"","what":"Installing BioCroValidation","title":"Getting Started With BioCroValidation","text":"easiest way install BioCroValidation type following within R terminal: Note method requires remotes package, can installed within R typing install.packages('remotes').","code":"remotes::install_github('biocro/BioCroValidation')"},{"path":"https://biocro.github.io/BioCroValidation/articles/BioCroValidation.html","id":"learning-more","dir":"Articles","previous_headings":"","what":"Learning More","title":"Getting Started With BioCroValidation","text":"BioCroValidation package includes extensive documentation. best place start Parameterizing Soybean-BioCro article, illustrates full process defining objective function, running optimization, examining results, saving new model definition. Another key resource help page objective_function, can accessed online typing ?objective_function R terminal. document explains available options normalization approaches, regularization approaches, aspects defining objective function.","code":""},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Parameterizing Soybean-BioCro","text":"article shows create objective function can used parameterize BioCro’s soybean model (Matthews et al. 2021; Lochocki et al. 2022). Since original publication Soybean-BioCro, BioCro module library undergone several changes, model re-parameterized several times. parameterizations use BioCroValidation, since performed BioCroValidation created. However, BioCroValidation able re-create objective functions used parameterizations. , re-create objective function used parameterization included version 3.2.0 BioCro R package. commands , use functions several libraries, load now:","code":"# Load required libraries library(BioCroValidation) library(BioCro) library(dfoptim) library(lattice)"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"building-the-objective-function","dir":"Articles","previous_headings":"","what":"Building the Objective Function","title":"Parameterizing Soybean-BioCro","text":"section, use objective_function function BioCroValidation package create objective function can used parameterize Soybean-BioCro. details , please see help page objective_function typing ?objective_function R terminal.","code":""},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-base-model-definition","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Base Model Definition","title":"Parameterizing Soybean-BioCro","text":"first need base model definition includes necessary modules, initial values, parameters, differential equation solver specifications. example, simply use Soybean-BioCro base model, just one small change: use Euler solver rather default solver, help make optimization run faster. reasonable sets parameter values, Euler solver seem cause substantial errors running Soybean-BioCro.","code":"# Specify the base model definition base_model_definition            <- soybean base_model_definition$ode_solver <- default_ode_solvers[['homemade_euler']]"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-observed-data","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Observed Data","title":"Parameterizing Soybean-BioCro","text":"observed data needed parameterize Soybean-BioCro included BioCroValidation package soyface_biomass data set, consists two years (2002 2005) biomass data associated standard deviations, included four separate tables. However, table requires pre-processing get ready. One issue data set specifies doy year (DOY) harvest, need specify time using BioCro’s convention (number hours since start year). Another issue data set includes pod seed values, Soybean-BioCro calculates shell seed masses, shell seed together comprise pod. Although observations include root biomass, nevertheless important constrain predicted root mass reasonable values. , assumed maximum root mass seventeen percent maximum aboveground biomass, achieved time maximum -ground biomass, based observations reported Ordóñez et al. (2020). observed data, sum stem leaf mass largest fifth time point years. , root mass estimated single time point added observed values. previous parameterizations, standard deviation root mass explicitly estimated; instead, standard-deviation-based weight factor implicitly set 1. 'logarithm' method \\(\\epsilon = 10^{-5}\\) used, weight factor 1 implies standard deviation \\(1 / e - 10^{-5} \\approx 0.3678694\\). See documentation page (?objective_function) information weighting method. Finally, data set includes values needed parameterization. includes leaf litter accumulated harvest, well DOY Rep_Mg_per_ha columns superseded columns defined . define helping function can accomplish required modifications described ; note operations different depending whether table represents biomass values standard deviations:","code":"# Define a helping function for processing data tables process_table <- function(data_table, type) {   # Define new `time` column   data_table$time <- (data_table$DOY - 1) * 24.0    # Define new `Shell_Mg_per_ha` column   data_table$Shell_Mg_per_ha <- if (type == 'biomass') {     # The shell is all parts of the pod other than the seed     data_table$Rep_Mg_per_ha - data_table$Seed_Mg_per_ha   } else {     # Add uncertainties in quadrature, a simple approach to error propagation     sqrt(data_table$Rep_Mg_per_ha^2 + data_table$Seed_Mg_per_ha^2)   }    # Define new `Root_Mg_per_ha` column, which has just one non-NA value   row_to_use <- 5                 # Choose row to use   data_table$Root_Mg_per_ha <- NA # Initialize all values to NA    if (type == 'biomass') {     # Estimate a mass at one time point     col_to_add <- c(       'Leaf_Mg_per_ha',       'Stem_Mg_per_ha',       'Rep_Mg_per_ha'     )      data_table[row_to_use, 'Root_Mg_per_ha'] <-       0.17 * sum(data_table[row_to_use, col_to_add])   } else {     # Estimate standard deviation at one time point     data_table[row_to_use, 'Root_Mg_per_ha'] <- 1 / exp(1) - 1e-5   }    # Remove columns by setting them to NULL   data_table$DOY              = NULL   data_table$Rep_Mg_per_ha    = NULL   data_table$Litter_Mg_per_ha = NULL    # Return the processed table   data_table }"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-data-driver-pairs","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Data-Driver Pairs","title":"Parameterizing Soybean-BioCro","text":"BioCro R package includes weather data years soyface_biomass data set. now ready define data-driver pairs, includes weather, observed biomass, standard deviation observed biomass, weight assign year: chosen equal weights two years.","code":"# Define the data-driver pairs data_driver_pairs <- list(   ambient_2002 = list(     data       = process_table(soyface_biomass[['ambient_2002']],     'biomass'),     data_stdev = process_table(soyface_biomass[['ambient_2002_std']], 'stdev'),     drivers    = BioCro::soybean_weather[['2002']],     weight     = 1   ),   ambient_2005 = list(     data       = process_table(soyface_biomass[['ambient_2005']],     'biomass'),     data_stdev = process_table(soyface_biomass[['ambient_2005_std']], 'stdev'),     drivers    = BioCro::soybean_weather[['2005']],     weight     = 1   ) )"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-post-processing-function","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Post-Processing Function","title":"Parameterizing Soybean-BioCro","text":"observed data includes values total litter, comprised leaf stem litter. However, model calculate quntity; instead, returns separate values leaf stem litter. address issue, can provide “post-processing function.” (optional) function applied simulation result can used add new columns. define function, adds new column total litter:","code":"# Define the post-processing function post_process_function <- function(sim_res) {   # Calculate the total litter as the sum of leaf and stem litter   within(sim_res, {TotalLitter = LeafLitter + StemLitter}) }"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-data-definitions","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Data Definitions","title":"Parameterizing Soybean-BioCro","text":"data sets columns whose names match corresponding model outputs. example, Leaf_Mg_per_ha column observed data must compared Leaf column model output, since represent leaf mass per unit ground area. handle mismatch, can provide set “data definitions” specify columns compared:","code":"# Define the data definition list, where the element names are columns in the # observed data tables, and the element values are the corresponding column # names in the model outputs data_definitions <- list( # Observed               Simulated   CumLitter_Mg_per_ha = 'TotalLitter',   Leaf_Mg_per_ha      = 'Leaf',   Root_Mg_per_ha      = 'Root',   Seed_Mg_per_ha      = 'Grain',   Shell_Mg_per_ha     = 'Shell',   Stem_Mg_per_ha      = 'Stem' )"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-arguments-to-vary","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Arguments to Vary","title":"Parameterizing Soybean-BioCro","text":"wish vary several parameters related carbon partitioning growth, senescence, maintenance respiration, growth respiration: growing tissue, two parameters (\\(\\alpha\\) \\(\\beta\\)) influence parbon partitioning coefficients. vary leaf, stem, shell (6 parameters total). senescing tissue, three parameters (\\(\\alpha_{sen}\\), \\(\\beta_{sen}\\), rate) influence senescence begins overall rate scenescence. vary leaf stem (6 parameters total). growing tissue, one parameter (grc) influences rate carbon use growth respiration. vary stem root (2 parameters total). tissue, one parameter (mrc) influences rate carbon use maintenance respiration. vary leaf, stem, root (3 parameters total). Together, 17 arguments vary. Typically, optimization problem requires time free parameter involved, helpful vary smallest possible set. One way reduce number free parameters treat “dependent.” words, calculate values parameters values others, truly free “independent.” fixing value mrc_stem value mrc_leaf. Thus, can think single maintenance respiration coefficient entire shoot; reduces number independent parameters one (16). independent arguments must specified list named numeric elements, name argument name value initial guess argument. use default Soybean-BioCro values initial guesses: dependent arguments must specified function takes list independent arguments input, returns list dependent arguments output:","code":"# Define a list of independent arguments and their initial values independent_arg_names <- c(   # Partitioning for leaf, stem, and shell   'alphaLeaf',   'betaLeaf',   'alphaStem',   'betaStem',   'alphaShell',   'betaShell',    # Senescence for leaf and stem   'alphaSeneLeaf',   'betaSeneLeaf',   'rateSeneLeaf',   'alphaSeneStem',   'betaSeneStem',   'rateSeneStem',    # Growth respiration for stem and root   'grc_stem',   'grc_root',    # Maintenance respiration for leaf and root   'mrc_leaf',   'mrc_root' )  independent_args <- soybean$parameters[independent_arg_names] # Define a function that sets `mrc_stem` to the value of `mrc_leaf` dependent_arg_function <- function(ind_args) {   list(mrc_stem = ind_args[['mrc_leaf']]) }"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-quantity-weights","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Quantity Weights","title":"Parameterizing Soybean-BioCro","text":"determining error metric value, wish assign different weights type observed value. can handled via quantity_weights, must list named numeric elements, name element output simulation, value weight.","code":"# Specify the quantity weights; there is no systematic way to determine these, # but the following weights have worked well in the past for Soybean-BioCro quantity_weights <- list(   Grain       = 1.0,   Leaf        = 1.0,   Root        = 0.1,   Shell       = 0.5,   Stem        = 1.0,   TotalLitter = 0.1 )"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-extra-penalty-function","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Extra Penalty Function","title":"Parameterizing Soybean-BioCro","text":"Sometimes optimizer may choose parameter values produce close agreement observed data nevertheless unreasonable biological perspective. prevent unreasonable parameters chosen, “extra penalties” can added error metric. penalties can specified using extra_penalty_function, must take result BioCro simulation input return numeric error penalty value, generally zero (issues found) large positive number (issue found). Soybean-BioCro parameterization, three common issues : Carbon never partitioned one key tissues. Carbon partitioning stem leaf starts different times. Carbon partitioning leaves begins early late. function return large value situations occurs, otherwise return value zero.","code":"# Define an extra penalty function extra_penalty_function <- function(sim_res) {   # Set the penalty value   PENALTY <- 9999    # Get the first times when each partitioning coefficient becomes non-zero   k_thresh <- 0.01 # Threshold k value to decide when growth has started   hpd      <- 24.0 # Hours per day    time <- sim_res[['time']]    time_grain <- time[sim_res[['kGrain']] > k_thresh][1]   time_leaf  <- time[sim_res[['kLeaf']]  > k_thresh][1]   time_shell <- time[sim_res[['kShell']] > k_thresh][1]   time_stem  <- time[sim_res[['kStem']]  > k_thresh][1]    # Return a penalty if necessary   if (is.na(time_grain) | is.na(time_leaf) | is.na(time_shell) | is.na(time_stem)) {     # One or more tissues is not growing     return(PENALTY)   } else if (abs(time_leaf - time_stem) > 5 * hpd) {     # The starts of leaf and stem growth are more than 5 days apart     return(PENALTY)   } else if (time_leaf - time[1] > 20 * hpd | time_leaf - time[1] < 10 * hpd) {     # The start of leaf growth is too late (more than 20 days after sowing) or     # too early (fewer than 10 days after sowing)     return(PENALTY)   } else {     # No problems were detected     return(0.0)   } }"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"the-objective-function","dir":"Articles","previous_headings":"Building the Objective Function","what":"The Objective Function","title":"Parameterizing Soybean-BioCro","text":"Now just ready build objective function. details discuss: Soybean-BioCro always used 'mean_max' method determining normalization factors; see Equations 14-16 Matthews et al. (2021) details. Soybean-BioCro always used 'logarithm' method determining weights standard deviations \\(\\epsilon = 10^{-5}\\); see Equation 17 Matthews et al. (2021) details. Soybean-BioCro used regularization. , possible build function. Note useful information printed function created, full list observed values corresponding weights.","code":"# Create the objective function obj_fun <- objective_function(   base_model_definition,   data_driver_pairs,   independent_args,   quantity_weights,   data_definitions       = data_definitions,   normalization_method   = 'mean_max',   stdev_weight_method    = 'logarithm',   stdev_weight_param     = 1e-5,   regularization_method  = 'none',   dependent_arg_function = dependent_arg_function,   post_process_function  = post_process_function,   extra_penalty_function = extra_penalty_function ) #>  #> The independent arguments and their initial values: #>  #> List of 16 #>  $ alphaLeaf    : num 23.9 #>  $ betaLeaf     : num -18.1 #>  $ alphaStem    : num 24.8 #>  $ betaStem     : num -18.5 #>  $ alphaShell   : num 13.6 #>  $ betaShell    : num -9.98 #>  $ alphaSeneLeaf: num 48.3 #>  $ betaSeneLeaf : num -29.5 #>  $ rateSeneLeaf : num 0.0122 #>  $ alphaSeneStem: num 4.19 #>  $ betaSeneStem : num -3.31 #>  $ rateSeneStem : num 0.000117 #>  $ grc_stem     : num 0.0283 #>  $ grc_root     : num 0.0027 #>  $ mrc_leaf     : num 0.000488 #>  $ mrc_root     : num 1e-05 #>  #> The dependent arguments and their initial values: #>  #> List of 1 #>  $ mrc_stem: num 0.000488 #>  #> The full data definitions: #>  #> List of 6 #>  $ Leaf_Mg_per_ha     : chr \"Leaf\" #>  $ Stem_Mg_per_ha     : chr \"Stem\" #>  $ Seed_Mg_per_ha     : chr \"Grain\" #>  $ CumLitter_Mg_per_ha: chr \"TotalLitter\" #>  $ Shell_Mg_per_ha    : chr \"Shell\" #>  $ Root_Mg_per_ha     : chr \"Root\" #>  #> The user-supplied data in long form: #>  #> $ambient_2002 #>    time quantity_name quantity_value quantity_stdev time_index expected_npts #> 1  4272          Leaf   0.1802843394   0.0408155501        649          3288 #> 2  4512          Leaf   0.5544619422   0.1638632739        889          3288 #> 3  4848          Leaf   1.3265529308   0.1337744335       1225          3288 #> 4  5184          Leaf   1.6979440069   0.2283266576       1561          3288 #> 5  5520          Leaf   1.8077427820   0.2024754215       1897          3288 #> 6  5880          Leaf   1.5788136482   0.0754751654       2257          3288 #> 7  6192          Leaf   0.9475377733   0.3445500325       2569          3288 #> 8  6888          Leaf   0.0000000000   0.0000000000       3265          3288 #> 9  4272          Stem   0.0852449694   0.0170797372        649          3288 #> 10 4512          Stem   0.4188538932   0.1384490248        889          3288 #> 11 4848          Stem   1.7110673664   0.1837107594       1225          3288 #> 12 5184          Stem   2.8928258965   0.4487440652       1561          3288 #> 13 5520          Stem   3.6859142604   0.4534474707       1897          3288 #> 14 5880          Stem   3.7452607171   0.2753213561       2257          3288 #> 15 6192          Stem   3.6184015745   0.1510453777       2569          3288 #> 16 6888          Stem   2.3057012247   0.1483892609       3265          3288 #> 17 4272         Grain   0.0000000000   0.0000000000        649          3288 #> 18 4512         Grain   0.0000000000   0.0000000000        889          3288 #> 19 4848         Grain   0.0000000000   0.0000000000       1225          3288 #> 20 5184         Grain   0.0000000000   0.0000000000       1561          3288 #> 21 5520         Grain   0.0000000000   0.0000000000       1897          3288 #> 22 5880         Grain   2.4803149604   0.3660583625       2257          3288 #> 23 6192         Grain   4.8468941378   0.5144215602       2569          3288 #> 24 6888         Grain   5.4133858263   0.1152608235       3265          3288 #> 25 4272   TotalLitter   0.0000000000   0.0000000000        649          3288 #> 26 4512   TotalLitter   0.0000000000   0.0000000000        889          3288 #> 27 4848   TotalLitter   0.0000000000   0.0000000000       1225          3288 #> 28 5184   TotalLitter   0.0000000000   0.0000000000       1561          3288 #> 29 5520   TotalLitter   0.3818897637   0.0456182275       1897          3288 #> 30 5880   TotalLitter   0.6633127734   0.0676627660       2257          3288 #> 31 6192   TotalLitter   0.9786377952   0.0320523860       2569          3288 #> 32 6888   TotalLitter   2.5831766621   0.2678295161       3265          3288 #> 33 4272         Shell   0.0000000000   0.0000000000        649          3288 #> 34 4512         Shell   0.0000000000   0.0000000000        889          3288 #> 35 4848         Shell   0.0003171479   0.0005493162       1225          3288 #> 36 5184         Shell   0.0793963255   0.0309899985       1561          3288 #> 37 5520         Shell   1.5545713035   0.2184025435       1897          3288 #> 38 5880         Shell   1.4956986001   0.6804094230       2257          3288 #> 39 6192         Shell   1.6977565178   0.9040650516       2569          3288 #> 40 6888         Shell   1.5955818021   0.1827578015       3265          3288 #> 45 5520          Root   1.1981988188   0.3678694412       1897          3288 #>          norm      w_var #> 1   52.286943  3.1984472 #> 2   52.286943  1.8086619 #> 3   52.286943  2.0115255 #> 4   52.286943  1.4769342 #> 5   52.286943  1.5970874 #> 6   52.286943  2.5838191 #> 7   52.286943  1.0654869 #> 8   52.286943 11.5129255 #> 9  224.431645  4.0692772 #> 10 224.431645  1.9771808 #> 11 224.431645  1.6943383 #> 12 224.431645  0.8012803 #> 13 224.431645  0.7908538 #> 14 224.431645  1.2897800 #> 15 224.431645  1.8901088 #> 16 224.431645  1.9078489 #> 17 468.875938 11.5129255 #> 18 468.875938 11.5129255 #> 19 468.875938 11.5129255 #> 20 468.875938 11.5129255 #> 21 468.875938 11.5129255 #> 22 468.875938  1.0049352 #> 23 468.875938  0.6646928 #> 24 468.875938  2.1604709 #> 25 106.764827 11.5129255 #> 26 106.764827 11.5129255 #> 27 106.764827 11.5129255 #> 28 106.764827 11.5129255 #> 29 106.764827  3.0872287 #> 30 106.764827  2.6930715 #> 31 106.764827  3.4400717 #> 32 106.764827  1.3173673 #> 33  46.118035 11.5129255 #> 34  46.118035 11.5129255 #> 35  46.118035  7.4887956 #> 36  46.118035  3.4737681 #> 37  46.118035  1.5213696 #> 38  46.118035  0.3850459 #> 39  46.118035  0.1008429 #> 40  46.118035  1.6995388 #> 45   2.871361  1.0000000 #>  #> $ambient_2005 #>    time quantity_name quantity_value quantity_stdev time_index expected_npts #> 1  4104          Leaf     0.22227188     0.03289659        577          2952 #> 2  4440          Leaf     0.84603750     0.14679830        913          2952 #> 3  4776          Leaf     1.18446563     0.33807429       1249          2952 #> 4  5112          Leaf     2.21805938     0.15217591       1585          2952 #> 5  5448          Leaf     2.14744687     0.11907759       1921          2952 #> 6  5784          Leaf     1.51948125     0.51280870       2257          2952 #> 7  6120          Leaf     0.06575625     0.06168624       2593          2952 #> 8  6456          Leaf     0.00000000     0.00000000       2929          2952 #> 9  4104          Stem     0.18880312     0.01431814        577          2952 #> 10 4440          Stem     0.85220625     0.19883006        913          2952 #> 11 4776          Stem     1.61896875     0.60528625       1249          2952 #> 12 5112          Stem     4.04361563     0.55987405       1585          2952 #> 13 5448          Stem     4.47772500     0.30674464       1921          2952 #> 14 5784          Stem     3.89208750     0.37910849       2257          2952 #> 15 6120          Stem     2.89905000     0.22082398       2593          2952 #> 16 6456          Stem     2.17560000     0.24325473       2929          2952 #> 17 4104         Grain     0.00000000     0.00000000        577          2952 #> 18 4440         Grain     0.00000000     0.00000000        913          2952 #> 19 4776         Grain     0.00000000     0.00000000       1249          2952 #> 20 5112         Grain     0.00000000     0.00000000       1585          2952 #> 21 5448         Grain     0.00000000     0.00000000       1921          2952 #> 22 5784         Grain     3.02249063     0.34171478       2257          2952 #> 23 6120         Grain     3.99820312     0.39895675       2593          2952 #> 24 6456         Grain     4.96564688     0.50722409       2929          2952 #> 25 4104   TotalLitter     0.00000000     0.00000000        577          2952 #> 26 4440   TotalLitter     0.00000000     0.00000000        913          2952 #> 27 4776   TotalLitter     0.00000000     0.00000000       1249          2952 #> 28 5112   TotalLitter     0.06654375     0.06370846       1585          2952 #> 29 5448   TotalLitter     0.18230625     0.05624687       1921          2952 #> 30 5784   TotalLitter     0.33593438     0.07334289       2257          2952 #> 31 6120   TotalLitter     0.86697187     0.21417663       2593          2952 #> 32 6456   TotalLitter     1.14843750     0.24626746       2929          2952 #> 33 4104         Shell     0.00000000     0.00000000        577          2952 #> 34 4440         Shell     0.00000000     0.00000000        913          2952 #> 35 4776         Shell     0.00000000     0.00000000       1249          2952 #> 36 5112         Shell     0.29925000     0.16427520       1585          2952 #> 37 5448         Shell     2.30455312     0.43414807       1921          2952 #> 38 5784         Shell     2.51028750     0.68049551       2257          2952 #> 39 6120         Shell     1.37287500     0.65544843       2593          2952 #> 40 6456         Shell     1.40660625     0.81122149       2929          2952 #> 45 5448          Root     1.51805325     0.36786944       1921          2952 #>          norm      w_var #> 1   78.716598  3.4140824 #> 2   78.716598  1.9186276 #> 3   78.716598  1.0844600 #> 4   78.716598  1.8826524 #> 5   78.716598  2.1278960 #> 6   78.716598  0.6678329 #> 7   78.716598  2.7855322 #> 8   78.716598 11.5129255 #> 9  320.800339  4.2455301 #> 10 320.800339  1.6152545 #> 11 320.800339  0.5020373 #> 12 320.800339  0.5800256 #> 13 320.800339  1.1817071 #> 14 320.800339  0.9699065 #> 15 320.800339  1.5103441 #> 16 320.800339  1.4136050 #> 17 394.522382 11.5129255 #> 18 394.522382 11.5129255 #> 19 394.522382 11.5129255 #> 20 394.522382 11.5129255 #> 21 394.522382 11.5129255 #> 22 394.522382  1.0737496 #> 23 394.522382  0.9188772 #> 24 394.522382  0.6787827 #> 25  21.102539 11.5129255 #> 26  21.102539 11.5129255 #> 27  21.102539 11.5129255 #> 28  21.102539  2.7532810 #> 29  21.102539  2.8778272 #> 30  21.102539  2.6124734 #> 31  21.102539  1.5409076 #> 32  21.102539  1.4012965 #> 33 100.824693 11.5129255 #> 34 100.824693 11.5129255 #> 35 100.824693 11.5129255 #> 36 100.824693  1.8061514 #> 37 100.824693  0.8343466 #> 38 100.824693  0.3849194 #> 39 100.824693  0.4224204 #> 40 100.824693  0.2092018 #> 45   4.608971  1.0000000 #>  #> The user-supplied quantity weights: #>  #> List of 6 #>  $ Grain      : num [1:2] 1 1 #>  $ Leaf       : num [1:2] 1 1 #>  $ Root       : num [1:2] 0.1 0.1 #>  $ Shell      : num [1:2] 0.5 0.5 #>  $ Stem       : num [1:2] 1 1 #>  $ TotalLitter: num [1:2] 0.1 0.1 #>  #> The user-supplied data-driver pair weights: #>  #> List of 2 #>  $ ambient_2002: num 1 #>  $ ambient_2005: num 1 #>  #> The initial error metric terms: #>  #> List of 2 #>  $ terms_from_data_driver_pairs:List of 2 #>   ..$ ambient_2002:List of 2 #>   .. ..$ least_squares_terms:List of 6 #>   .. .. ..$ Grain      : num 0.00371 #>   .. .. ..$ Leaf       : num 0.0214 #>   .. .. ..$ Root       : num 0.00353 #>   .. .. ..$ Shell      : num 0.0115 #>   .. .. ..$ Stem       : num 0.0119 #>   .. .. ..$ TotalLitter: num 0.00264 #>   .. ..$ extra_penalty      : num 0 #>   ..$ ambient_2005:List of 2 #>   .. ..$ least_squares_terms:List of 6 #>   .. .. ..$ Grain      : num 0.00744 #>   .. .. ..$ Leaf       : num 0.00742 #>   .. .. ..$ Root       : num 0.0053 #>   .. .. ..$ Shell      : num 0.0118 #>   .. .. ..$ Stem       : num 0.00345 #>   .. .. ..$ TotalLitter: num 0.000304 #>   .. ..$ extra_penalty      : num 0 #>  $ regularization_penalty      : num 0 #>  #> The initial error metric value: #>  #> [1] 0.09029496"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"optimizing-the-parameter-values","dir":"Articles","previous_headings":"","what":"Optimizing the Parameter Values","title":"Parameterizing Soybean-BioCro","text":"objective function designed passed minimization algorithm, determine argument values produce best agreement model predictions observations. Soybean-BioCro already parameterized, already good agreement model data. can seen examining value error metric using default Soybean-BioCro values: evaluates 0.090295. low value Soybean-BioCro parameterization, indicating good agreement already found. , example, intentionally change parameter value small random amount, use optimizer improve parameter values; ideal world, optimizer eventually pick parameter values close original Soybean-BioCro values. many optimizers available R. Base R includes optim function, others available dfoptim DEoptim packages. use nmkb optimizer dfoptim library, requires upper lower bounds parameter initial guess.","code":"# Evaluate the error function with default Soybean-BioCro parameters default_error <- obj_fun(as.numeric(independent_args))"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"choosing-an-initial-guess","dir":"Articles","previous_headings":"Optimizing the Parameter Values","what":"Choosing an Initial Guess","title":"Parameterizing Soybean-BioCro","text":"mentioned , intentionally choose “bad” initial guess tweaking parameter value small random amount. Note set seed ensure result obtained every time performed. Also note initial guess must numeric vector, elements ordered independent_args. Even though changes parameter values small, still substantial change value error metric: evaluates 0.1847518, 51 percent larger default parameter values.","code":"# Set a seed set.seed(1234)  # Make an initial guess by perturbing the default values by a small amount rel_size <- 0.02  initial_guess <- as.numeric(independent_args) *   (1.0 + runif(length(independent_args), -rel_size, rel_size)) # Evaluate the error function with default Soybean-BioCro parameters initial_error <- obj_fun(initial_guess)"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"choosing-lower-and-upper-bounds","dir":"Articles","previous_headings":"Optimizing the Parameter Values","what":"Choosing Lower and Upper Bounds","title":"Parameterizing Soybean-BioCro","text":"always systematic approach choosing lower upper bounds parameter values, following bounds worked well Soybean-BioCro past: \\(\\alpha\\) parameters used partitioning senescence calculations confined interval [0, 50]. \\(\\beta\\) parameters used partitioning senescence calculations confined interval [-50, 0]. senescence rates lower bound zero, different upper bounds tissue. maintenance respiration coefficients confined interval [1e-6, 1e-2]. growth respiration coefficients must positive non-zero, different bounds tissue. many possible ways specify bounds R, ultimately must expressed numeric vectors, elements ordered independent_args. use bounds_table function BioCroValidation create data frame lower upper bounds stored columns. Later, columns can passed optimizer. bounds_table function also check initial guess ensure lies within bounds; information function, see help page typing ?bounds_table R terminal.","code":"# Specify some bounds aul <- 50   # Upper limit for alpha parameters bll <- -50  # Lower limit for beta parameters mll <- 1e-6 # Lower limit for mrc parameters mul <- 1e-2 # Upper limit for mrc parameters  # Define a table with the bounds in the same order as `independent_args` bounds <- bounds_table(   independent_args,   list(     alphaLeaf     = c(0,      aul),     alphaStem     = c(0,      aul),     alphaShell    = c(0,      aul),     alphaSeneLeaf = c(0,      aul),     alphaSeneStem = c(0,      aul),     betaLeaf      = c(bll,    0),     betaStem      = c(bll,    0),     betaShell     = c(bll,    0),     betaSeneLeaf  = c(bll,    0),     betaSeneStem  = c(bll,    0),     rateSeneLeaf  = c(0,      0.0125),     rateSeneStem  = c(0,      0.005),     mrc_leaf      = c(mll,    mul),     mrc_root      = c(mll,    mul),     grc_stem      = c(8e-4,   0.08),     grc_root      = c(0.0025, 0.075)   ),   initial_guess )"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"running-the-optimizer","dir":"Articles","previous_headings":"Optimizing the Parameter Values","what":"Running the Optimizer","title":"Parameterizing Soybean-BioCro","text":"Now use optimizer improve initial guess. mentioned , use nmkb optimizer dfoptim package. good choice decent starting guess known. broader search necessary, DEoptim DEoptim package may appropriate, although generally needs time run. make sure example take much time, use loose tolerance; realistic example probably use 1e-4 1e-5. document generated, running optimizer required following amount time: total time 1.38 minutes. real parameterization problem, can many times longer, may even need days run personal laptop computer. optimizer also reports many times objective function called, among details: value feval 207, average, call objective function required approximately 0.4 seconds.","code":"# Run the optimizer optim_res <- nmkb(   initial_guess,   obj_fun,   bounds[['lower']],   bounds[['upper']],   control = list(     tol = 1e-2,     restarts.max = 10   ),   debug_mode = FALSE # Passed to obj_fun; set to TRUE to enable debug mode ) #>    user  system elapsed  #>  82.471   0.298  82.778 str(optim_res) #> List of 6 #>  $ par        : num [1:16] 23.9 -18.2 24.8 -18.4 13.5 ... #>  $ value      : num 0.0921 #>  $ feval      : num 207 #>  $ restarts   : num 5 #>  $ convergence: num 0 #>  $ message    : chr \"Successful convergence\""},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"comparing-parameter-values","dir":"Articles","previous_headings":"Optimizing the Parameter Values","what":"Comparing Parameter Values","title":"Parameterizing Soybean-BioCro","text":"Let’s see whether optimized parameters closer default parameters initial guess . table, improved column TRUE, means optimized parameter value closer default value initial guess ; words, means optimizer truly improved initial guess. example, 7 16 parameter estimates improved (44 percent). can also compare error metric original value. shown , now 0.0920539, 1.9 percent larger default parameter values. optimized parameter values likely improved using stringent tolerance optimizer, require time run.","code":"# Create a table of the various independent argument values ind_arg_table <- data.frame(   arg_name      = independent_arg_names,   defaults      = as.numeric(independent_args),   initial_guess = initial_guess,   optimized     = optim_res[['par']],   stringsAsFactors = FALSE )  # Add differences ind_arg_table <- within(ind_arg_table, {   initial_diff   = abs(initial_guess - defaults)   optimized_diff = abs(optimized - defaults)   improved       = optimized_diff < initial_diff })  # View results print(ind_arg_table) #>         arg_name     defaults initial_guess     optimized improved #> 1      alphaLeaf  23.88950000  2.352036e+01  2.386565e+01     TRUE #> 2       betaLeaf -18.08510000 -1.817357e+01 -1.817064e+01     TRUE #> 3      alphaStem  24.82480000  2.493331e+01  2.479432e+01     TRUE #> 4       betaStem -18.52140000 -1.861281e+01 -1.844565e+01     TRUE #> 5     alphaShell  13.59550000  1.379177e+01  1.347693e+01     TRUE #> 6      betaShell  -9.98090000 -1.003692e+01 -1.000498e+01     TRUE #> 7  alphaSeneLeaf  48.32000000  4.737195e+01  4.986793e+01    FALSE #> 8   betaSeneLeaf -29.53930000 -2.922329e+01 -3.023728e+01    FALSE #> 9   rateSeneLeaf   0.01219800  1.227904e-02  1.244641e-02    FALSE #> 10 alphaSeneStem   4.19370000  4.196091e+00  3.889660e+00    FALSE #> 11  betaSeneStem  -3.31240000 -3.338050e+00 -3.387799e+00    FALSE #> 12  rateSeneStem   0.00011700  1.172105e-04  1.274687e-04    FALSE #> 13      grc_stem   0.02828000  2.803423e-02  2.844730e-02     TRUE #> 14      grc_root   0.00270000  2.745731e-03  2.763255e-03    FALSE #> 15      mrc_leaf   0.00048836  4.843030e-04  5.059738e-04    FALSE #> 16      mrc_root   0.00001000  1.013492e-05  1.072817e-05    FALSE #>    optimized_diff initial_diff #> 1    2.385246e-02 3.691373e-01 #> 2    8.554244e-02 8.847188e-02 #> 3    3.048061e-02 1.085089e-01 #> 4    7.574948e-02 9.140640e-02 #> 5    1.185710e-01 1.962730e-01 #> 6    2.408361e-02 5.601704e-02 #> 7    1.547928e+00 9.480466e-01 #> 8    6.979834e-01 3.160108e-01 #> 9    2.484111e-04 8.103559e-05 #> 10   3.040402e-01 2.390600e-03 #> 11   7.539867e-02 2.565007e-02 #> 12   1.046873e-05 2.104822e-07 #> 13   1.673041e-04 2.457718e-04 #> 14   6.325510e-05 4.573082e-05 #> 15   1.761377e-05 4.056985e-06 #> 16   7.281688e-07 1.349183e-07"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"comparing-model-outputs","dir":"Articles","previous_headings":"Optimizing the Parameter Values","what":"Comparing Model Outputs","title":"Parameterizing Soybean-BioCro","text":"Another way evaluate results optimization compare simulations using default, perturbed, re-optimized versions model. Following re-parameterization, now new values independent arguments, enough actually run new version model. Thus, next step form new model definition updating values default soybean model. can accomplished using update_model function BioCroValidation: can check three models different values key parameters, “dependent” argument mrc_stem: Now can run version model single year visually compare outputs:  can see simulated values tissues differ much models, large differences tissues; cases, default re-optimized versions similar perturbed version much different.","code":"# Get model definition lists for the perturbed and re-parameterized versions of # the soybean model soybean_perturbed <- update_model(   BioCro::soybean,   independent_args,   initial_guess,   dependent_arg_function = dependent_arg_function )  soybean_reparam <- update_model(   BioCro::soybean,   independent_args,   optim_res[['par']],   dependent_arg_function = dependent_arg_function ) print(BioCro::soybean$parameters$mrc_stem) #> [1] 0.00048836  print(soybean_perturbed$parameters$mrc_stem) #> [1] 0.000484303  print(soybean_reparam$parameters$mrc_stem) #> [1] 0.0005059738 # Define a helper function that runs a single model for the year 2005 run_2005 <- function(model_definition) {   with(model_definition, {run_biocro(     initial_values,     parameters,     soybean_weather[['2005']],     direct_modules,     differential_modules,     ode_solver   )}) }  # Run each model and combine the results full_res <- rbind(   within(run_2005(BioCro::soybean),   {model = 'Default Soybean-BioCro'}),   within(run_2005(soybean_perturbed), {model = 'Perturbed Soybean-BioCro'}),   within(run_2005(soybean_reparam),   {model = 'Re-parameterized Soybean-BioCro'}) )  # Plot the results xyplot(   Leaf + Stem + Root + Grain ~ fractional_doy,   group = model,   data = full_res,   type = 'l',   auto.key = list(space = 'top'),   xlab = 'Day of year (2005)',   ylab = 'Biomass (Mg / ha)' )"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"saving-the-new-model-definition","dir":"Articles","previous_headings":"Optimizing the Parameter Values","what":"Saving the New Model Definition","title":"Parameterizing Soybean-BioCro","text":"realistic parameterization takes long time complete, important save results later use. One approach save model definition list using save saveRDS functions base R. However, options create binary files human-readable, easily tracked using git. alternative, BioCroValidation includes function called write_model forms string representing R command can called re-create model definition. command string can written text file, making easy read track git. apply write_model re-optimized soybean model: can view resulting R command string: can also written text file:","code":"# Convert the re-parameterized soybean model to an R command string r_cmd_string <- with(soybean_reparam, write_model(   'soybean_reparam',   direct_modules,   differential_modules,   initial_values,   parameters,   ode_solver )) writeLines(r_cmd_string) #> soybean_reparam <- list( #>     direct_modules = list( #>         \"BioCro:format_time\", #>         \"BioCro:stomata_water_stress_linear\", #>         \"BioCro:sla_linear\", #>         \"BioCro:parameter_calculator\", #>         \"BioCro:soybean_development_rate_calculator\", #>         \"BioCro:leaf_water_stress_exponential\", #>         \"BioCro:partitioning_coefficient_logistic\", #>         \"BioCro:soil_evaporation\", #>         \"BioCro:solar_position_michalsky\", #>         \"BioCro:shortwave_atmospheric_scattering\", #>         \"BioCro:incident_shortwave_from_ground_par\", #>         \"BioCro:height_from_lai\", #>         \"BioCro:canopy_gbw_thornley\", #>         \"BioCro:stefan_boltzmann_longwave\", #>         \"BioCro:ten_layer_canopy_properties\", #>         \"BioCro:ten_layer_c3_canopy\", #>         \"BioCro:ten_layer_canopy_integrator\", #>         \"BioCro:no_leaf_resp_neg_assim_partitioning_growth_calculator\", #>         \"BioCro:senescence_coefficient_logistic\", #>         \"BioCro:carbon_assimilation_to_biomass\" #>     ), #>     differential_modules = list( #>         \"BioCro:senescence_logistic\", #>         \"BioCro:maintenance_respiration\", #>         \"BioCro:partitioning_growth\", #>         \"BioCro:two_layer_soil_profile\", #>         \"BioCro:development_index\", #>         \"BioCro:thermal_time_linear\" #>     ), #>     ode_solver = list( #>         type = \"boost_rkck54\", #>         output_step_size = 1.000000, #>         adaptive_rel_error_tol = 1.000000e-04, #>         adaptive_abs_error_tol = 1.000000e-04, #>         adaptive_max_steps = 200 #>     ), #>     initial_values = list( #>         \"Leaf\" = 0.06312, #>         \"Stem\" = 0.00789, #>         \"Root\" = 0.00789, #>         \"Grain\" = 1e-05, #>         \"Shell\" = 1e-05, #>         \"LeafLitter\" = 0, #>         \"RootLitter\" = 0, #>         \"StemLitter\" = 0, #>         \"soil_water_content\" = 0.32, #>         \"cws1\" = 0.32, #>         \"cws2\" = 0.32, #>         \"DVI\" = -1, #>         \"TTc\" = 0, #>         \"Rhizome\" = 1e-07, #>         \"RhizomeLitter\" = 0 #>     ), #>     parameters = list( #>         \"soil_air_entry\" = -2.6, #>         \"soil_b_coefficient\" = 5.2, #>         \"soil_bulk_density\" = 1.35, #>         \"soil_clay_content\" = 0.34, #>         \"soil_field_capacity\" = 0.32, #>         \"soil_sand_content\" = 0.32, #>         \"soil_saturated_conductivity\" = 6.4e-05, #>         \"soil_saturation_capacity\" = 0.52, #>         \"soil_silt_content\" = 0.34, #>         \"soil_wilting_point\" = 0.2, #>         \"iSp\" = 3.5, #>         \"Sp_thermal_time_decay\" = 0, #>         \"LeafN\" = 2, #>         \"LeafN_0\" = 2, #>         \"vmax_n_intercept\" = 0, #>         \"vmax1\" = 110, #>         \"alphab1\" = 0, #>         \"alpha1\" = 0, #>         \"maturity_group\" = 3, #>         \"Tbase_emr\" = 10, #>         \"TTemr_threshold\" = 60, #>         \"Rmax_emrV0\" = 0.199, #>         \"Tmin_emrV0\" = 5, #>         \"Topt_emrV0\" = 31.5, #>         \"Tmax_emrV0\" = 45, #>         \"Tmin_R0R1\" = 5, #>         \"Topt_R0R1\" = 31.5, #>         \"Tmax_R0R1\" = 45, #>         \"Tmin_R1R7\" = 0, #>         \"Topt_R1R7\" = 21.5, #>         \"Tmax_R1R7\" = 38.7, #>         \"sowing_fractional_doy\" = 0, #>         \"alphaLeaf\" = 23.8656475358454, #>         \"alphaStem\" = 24.7943193862222, #>         \"betaLeaf\" = -18.1706424424747, #>         \"betaStem\" = -18.4456505196764, #>         \"alphaRoot\" = 36.967, #>         \"betaRoot\" = -40.1915, #>         \"alphaShell\" = 13.4769290411408, #>         \"betaShell\" = -10.0049836091908, #>         \"kRhizome_emr\" = 0, #>         \"rsec\" = 0.2, #>         \"soil_clod_size\" = 0.04, #>         \"soil_reflectance\" = 0.2, #>         \"soil_transmission\" = 0.01, #>         \"specific_heat_of_air\" = 1010, #>         \"lat\" = 40, #>         \"longitude\" = -88, #>         \"atmospheric_pressure\" = 101325, #>         \"atmospheric_transmittance\" = 0.6, #>         \"atmospheric_scattering\" = 0.3, #>         \"par_energy_fraction\" = 0.5, #>         \"par_energy_content\" = 0.219, #>         \"heightf\" = 6, #>         \"min_gbw_canopy\" = 0.005, #>         \"dry_biomass_per_carbon\" = 30.026, #>         \"emissivity_sky\" = 1, #>         \"chil\" = 0.81, #>         \"k_diffuse\" = 0.7, #>         \"kpLN\" = 0, #>         \"leaf_reflectance_nir\" = 0.42, #>         \"leaf_reflectance_par\" = 0.1, #>         \"leaf_transmittance_nir\" = 0.42, #>         \"leaf_transmittance_par\" = 0.05, #>         \"lnfun\" = 0, #>         \"Gstar_c\" = 19.02, #>         \"Gstar_Ea\" = 37830, #>         \"Jmax_c\" = 17.57, #>         \"Jmax_Ea\" = 43540, #>         \"Kc_c\" = 38.05, #>         \"Kc_Ea\" = 79430, #>         \"Ko_c\" = 20.3, #>         \"Ko_Ea\" = 36380, #>         \"phi_PSII_0\" = 0.352, #>         \"phi_PSII_1\" = 0.022, #>         \"phi_PSII_2\" = -0.00034, #>         \"Rd_c\" = 18.72, #>         \"Rd_Ea\" = 46390, #>         \"theta_0\" = 0.76, #>         \"theta_1\" = 0.018, #>         \"theta_2\" = -0.00037, #>         \"Tp_c\" = 19.77399, #>         \"Tp_Ha\" = 62990, #>         \"Tp_Hd\" = 182140, #>         \"Tp_S\" = 588, #>         \"Vcmax_c\" = 26.35, #>         \"Vcmax_Ea\" = 65330, #>         \"jmax\" = 195, #>         \"jmax_mature\" = 195, #>         \"sf_jmax\" = 0.2, #>         \"electrons_per_carboxylation\" = 4.5, #>         \"electrons_per_oxygenation\" = 5.25, #>         \"tpu_rate_max\" = 13, #>         \"Rd\" = 1.28, #>         \"Catm\" = 372.59, #>         \"O2\" = 210, #>         \"b0\" = 0.008, #>         \"b1\" = 10.6, #>         \"Gs_min\" = 0.001, #>         \"windspeed_height\" = 5, #>         \"beta_PSII\" = 0.5, #>         \"leafwidth\" = 0.1, #>         \"growth_respiration_fraction\" = 0, #>         \"grc_stem\" = 0.0284473040567858, #>         \"grc_root\" = 0.00276325510436536, #>         \"mrc_leaf\" = 0.000505973771827042, #>         \"mrc_stem\" = 0.000505973771827042, #>         \"mrc_root\" = 1.07281688473608e-05, #>         \"mrc_grain\" = 1e-05, #>         \"retrans\" = 0.9, #>         \"retrans_rhizome\" = 1, #>         \"rateSeneLeaf\" = 0.0124464110871913, #>         \"rateSeneStem\" = 0.000127468732965756, #>         \"rateSeneRoot\" = 0, #>         \"rateSeneRhizome\" = 0, #>         \"alphaSeneLeaf\" = 49.8679276606362, #>         \"alphaSeneStem\" = 3.88965982514793, #>         \"alphaSeneRoot\" = 10, #>         \"alphaSeneRhizome\" = 10, #>         \"betaSeneLeaf\" = -30.2372834250869, #>         \"betaSeneStem\" = -3.3877986715034, #>         \"betaSeneRoot\" = -10, #>         \"betaSeneRhizome\" = -10, #>         \"remobilization_fraction\" = 0.6, #>         \"soil_depth1\" = 0, #>         \"soil_depth2\" = 2.5, #>         \"soil_depth3\" = 10, #>         \"wsFun\" = 2, #>         \"hydrDist\" = 0, #>         \"rfl\" = 0.2, #>         \"rsdf\" = 0.44, #>         \"phi1\" = 0.01, #>         \"phi2\" = 1.5, #>         \"tbase\" = 10, #>         \"km_leaf_litter\" = 2, #>         \"timestep\" = 1 #>     ) #> ) # Save the model definition as an R file in the current working directory writeLines(r_cmd_string, './soybean_reparam.R')"},{"path":"https://biocro.github.io/BioCroValidation/articles/parameterizing_soybean_biocro.html","id":"commands-from-this-document","dir":"Articles","previous_headings":"","what":"Commands From This Document","title":"Parameterizing Soybean-BioCro","text":"","code":"### ### Preliminaries ###  # Load required libraries library(BioCroValidation) library(BioCro) library(dfoptim) library(lattice)  ### ### Prepare inputs for `objective_function` ###  # Specify the base model definition base_model_definition            <- soybean base_model_definition$ode_solver <- default_ode_solvers[['homemade_euler']]  # Define a helping function for processing data tables process_table <- function(data_table, type) {   # Define new `time` column   data_table$time <- (data_table$DOY - 1) * 24.0    # Define new `Shell_Mg_per_ha` column   data_table$Shell_Mg_per_ha <- if (type == 'biomass') {     # The shell is all parts of the pod other than the seed     data_table$Rep_Mg_per_ha - data_table$Seed_Mg_per_ha   } else {     # Add uncertainties in quadrature, a simple approach to error propagation     sqrt(data_table$Rep_Mg_per_ha^2 + data_table$Seed_Mg_per_ha^2)   }    # Define new `Root_Mg_per_ha` column, which has just one non-NA value   row_to_use <- 5                 # Choose row to use   data_table$Root_Mg_per_ha <- NA # Initialize all values to NA    if (type == 'biomass') {     # Estimate a mass at one time point     col_to_add <- c(       'Leaf_Mg_per_ha',       'Stem_Mg_per_ha',       'Rep_Mg_per_ha'     )      data_table[row_to_use, 'Root_Mg_per_ha'] <-       0.17 * sum(data_table[row_to_use, col_to_add])   } else {     # Estimate standard deviation at one time point     data_table[row_to_use, 'Root_Mg_per_ha'] <- 1 / exp(1) - 1e-5   }    # Remove columns by setting them to NULL   data_table$DOY              = NULL   data_table$Rep_Mg_per_ha    = NULL   data_table$Litter_Mg_per_ha = NULL    # Return the processed table   data_table }  # Define the data-driver pairs data_driver_pairs <- list(   ambient_2002 = list(     data       = process_table(soyface_biomass[['ambient_2002']],     'biomass'),     data_stdev = process_table(soyface_biomass[['ambient_2002_std']], 'stdev'),     drivers    = BioCro::soybean_weather[['2002']],     weight     = 1   ),   ambient_2005 = list(     data       = process_table(soyface_biomass[['ambient_2005']],     'biomass'),     data_stdev = process_table(soyface_biomass[['ambient_2005_std']], 'stdev'),     drivers    = BioCro::soybean_weather[['2005']],     weight     = 1   ) )  # Define the post-processing function post_process_function <- function(sim_res) {   # Calculate the total litter as the sum of leaf and stem litter   within(sim_res, {TotalLitter = LeafLitter + StemLitter}) }  # Define the data definition list, where the element names are columns in the # observed data tables, and the element values are the corresponding column # names in the model outputs data_definitions <- list( # Observed               Simulated   CumLitter_Mg_per_ha = 'TotalLitter',   Leaf_Mg_per_ha      = 'Leaf',   Root_Mg_per_ha      = 'Root',   Seed_Mg_per_ha      = 'Grain',   Shell_Mg_per_ha     = 'Shell',   Stem_Mg_per_ha      = 'Stem' )  # Define a list of independent arguments and their initial values independent_arg_names <- c(   # Partitioning for leaf, stem, and shell   'alphaLeaf',   'betaLeaf',   'alphaStem',   'betaStem',   'alphaShell',   'betaShell',    # Senescence for leaf and stem   'alphaSeneLeaf',   'betaSeneLeaf',   'rateSeneLeaf',   'alphaSeneStem',   'betaSeneStem',   'rateSeneStem',    # Growth respiration for stem and root   'grc_stem',   'grc_root',    # Maintenance respiration for leaf and root   'mrc_leaf',   'mrc_root' )  independent_args <- soybean$parameters[independent_arg_names]  # Define a function that sets `mrc_stem` to the value of `mrc_leaf` dependent_arg_function <- function(ind_args) {   list(mrc_stem = ind_args[['mrc_leaf']]) }  # Specify the quantity weights; there is no systematic way to determine these, # but the following weights have worked well in the past for Soybean-BioCro quantity_weights <- list(   Grain       = 1.0,   Leaf        = 1.0,   Root        = 0.1,   Shell       = 0.5,   Stem        = 1.0,   TotalLitter = 0.1 )  # Define an extra penalty function extra_penalty_function <- function(sim_res) {   # Set the penalty value   PENALTY <- 9999    # Get the first times when each partitioning coefficient becomes non-zero   k_thresh <- 0.01 # Threshold k value to decide when growth has started   hpd      <- 24.0 # Hours per day    time <- sim_res[['time']]    time_grain <- time[sim_res[['kGrain']] > k_thresh][1]   time_leaf  <- time[sim_res[['kLeaf']]  > k_thresh][1]   time_shell <- time[sim_res[['kShell']] > k_thresh][1]   time_stem  <- time[sim_res[['kStem']]  > k_thresh][1]    # Return a penalty if necessary   if (is.na(time_grain) | is.na(time_leaf) | is.na(time_shell) | is.na(time_stem)) {     # One or more tissues is not growing     return(PENALTY)   } else if (abs(time_leaf - time_stem) > 5 * hpd) {     # The starts of leaf and stem growth are more than 5 days apart     return(PENALTY)   } else if (time_leaf - time[1] > 20 * hpd | time_leaf - time[1] < 10 * hpd) {     # The start of leaf growth is too late (more than 20 days after sowing) or     # too early (fewer than 10 days after sowing)     return(PENALTY)   } else {     # No problems were detected     return(0.0)   } }  ### ### Create the objective function ###  # Create the objective function obj_fun <- objective_function(   base_model_definition,   data_driver_pairs,   independent_args,   quantity_weights,   data_definitions       = data_definitions,   normalization_method   = 'mean_max',   stdev_weight_method    = 'logarithm',   stdev_weight_param     = 1e-5,   regularization_method  = 'none',   dependent_arg_function = dependent_arg_function,   post_process_function  = post_process_function,   extra_penalty_function = extra_penalty_function )  ### ### Use an optimizer to choose parameter values ###  # Set a seed set.seed(1234)  # Make an initial guess by perturbing the default values by a small amount rel_size <- 0.02  initial_guess <- as.numeric(independent_args) *   (1.0 + runif(length(independent_args), -rel_size, rel_size))  # Specify some bounds aul <- 50   # Upper limit for alpha parameters bll <- -50  # Lower limit for beta parameters mll <- 1e-6 # Lower limit for mrc parameters mul <- 1e-2 # Upper limit for mrc parameters  # Define a table with the bounds in the same order as `independent_args` bounds <- bounds_table(   independent_args,   list(     alphaLeaf     = c(0,      aul),     alphaStem     = c(0,      aul),     alphaShell    = c(0,      aul),     alphaSeneLeaf = c(0,      aul),     alphaSeneStem = c(0,      aul),     betaLeaf      = c(bll,    0),     betaStem      = c(bll,    0),     betaShell     = c(bll,    0),     betaSeneLeaf  = c(bll,    0),     betaSeneStem  = c(bll,    0),     rateSeneLeaf  = c(0,      0.0125),     rateSeneStem  = c(0,      0.005),     mrc_leaf      = c(mll,    mul),     mrc_root      = c(mll,    mul),     grc_stem      = c(8e-4,   0.08),     grc_root      = c(0.0025, 0.075)   ),   initial_guess )  # Run the optimizer optim_res <- nmkb(   initial_guess,   obj_fun,   bounds[['lower']],   bounds[['upper']],   control = list(     tol = 1e-2,     restarts.max = 10   ),   debug_mode = FALSE # Passed to obj_fun; set to TRUE to enable debug mode )  ### ### Check and record the new values ###  # Create a table of the various independent argument values ind_arg_table <- data.frame(   arg_name      = independent_arg_names,   defaults      = as.numeric(independent_args),   initial_guess = initial_guess,   optimized     = optim_res[['par']],   stringsAsFactors = FALSE )  # Add differences ind_arg_table <- within(ind_arg_table, {   initial_diff   = abs(initial_guess - defaults)   optimized_diff = abs(optimized - defaults)   improved       = optimized_diff < initial_diff })  # View results print(ind_arg_table)  # Get model definition lists for the perturbed and re-parameterized versions of # the soybean model soybean_perturbed <- update_model(   BioCro::soybean,   independent_args,   initial_guess,   dependent_arg_function = dependent_arg_function )  soybean_reparam <- update_model(   BioCro::soybean,   independent_args,   optim_res[['par']],   dependent_arg_function = dependent_arg_function )  # Define a helper function that runs a single model for the year 2005 run_2005 <- function(model_definition) {   with(model_definition, {run_biocro(     initial_values,     parameters,     soybean_weather[['2005']],     direct_modules,     differential_modules,     ode_solver   )}) }  # Run each model and combine the results full_res <- rbind(   within(run_2005(BioCro::soybean),   {model = 'Default Soybean-BioCro'}),   within(run_2005(soybean_perturbed), {model = 'Perturbed Soybean-BioCro'}),   within(run_2005(soybean_reparam),   {model = 'Re-parameterized Soybean-BioCro'}) )  # Plot the results xyplot(   Leaf + Stem + Root + Grain ~ fractional_doy,   group = model,   data = full_res,   type = 'l',   auto.key = list(space = 'top'),   xlab = 'Day of year (2005)',   ylab = 'Biomass (Mg / ha)' )  # Convert the re-parameterized soybean model to an R command string r_cmd_string <- with(soybean_reparam, write_model(   'soybean_reparam',   direct_modules,   differential_modules,   initial_values,   parameters,   ode_solver ))  # Save the model definition as an R file in the current working directory writeLines(r_cmd_string, './soybean_reparam.R')"},{"path":[]},{"path":"https://biocro.github.io/BioCroValidation/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward B. Lochocki. Maintainer, author. BioCroValidation authors. Copyright holder.","code":""},{"path":"https://biocro.github.io/BioCroValidation/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lochocki E (2025). BioCroValidation: Tools Validating BioCro Models. R package version 0.2.0, https://github.com/BioCro/BioCroValidation.","code":"@Manual{,   title = {BioCroValidation: Tools for Validating BioCro Models},   author = {Edward B. Lochocki},   year = {2025},   note = {R package version 0.2.0},   url = {https://github.com/BioCro/BioCroValidation}, }"},{"path":"https://biocro.github.io/BioCroValidation/index.html","id":"biocrovalidation","dir":"","previous_headings":"","what":"BioCroValidation","title":"Tools for Validating BioCro Models","text":"BioCroValidation collection tools helping validate BioCro crop growth models. package work progress. development proceeds, functions subject modification removal without notice.","code":""},{"path":"https://biocro.github.io/BioCroValidation/index.html","id":"installing-the-r-package","dir":"","previous_headings":"BioCroValidation","what":"Installing the R Package","title":"Tools for Validating BioCro Models","text":"easiest way install BioCroValidation type following within R terminal: Note method requires remotes package, can installed within R typing install.packages('remotes').","code":"remotes::install_github('BioCro/BioCroValidation')"},{"path":"https://biocro.github.io/BioCroValidation/index.html","id":"usage","dir":"","previous_headings":"BioCroValidation","what":"Usage","title":"Tools for Validating BioCro Models","text":"best way learn using BioCroValidation visit BioCroValidation website click “Get Started” link top menu bar. website includes documentation functions data sets included package, well articles describe general features several important use cases.","code":""},{"path":"https://biocro.github.io/BioCroValidation/index.html","id":"license","dir":"","previous_headings":"BioCroValidation","what":"License","title":"Tools for Validating BioCro Models","text":"BioCroValidation R package documentation licensed MIT license.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/BioCroValidation.html","id":null,"dir":"Reference","previous_headings":"","what":"The BioCroValidation R package — BioCroValidation","title":"The BioCroValidation R package — BioCroValidation","text":"BioCroValidation R package provides collection tools   validating BioCro crop growth models.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/bounds_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table of lower and upper bounds — bounds_table","title":"Create a table of lower and upper bounds — bounds_table","text":"optimization, often necessary provide lower upper   bounds parameters varied. Typically specified   numeric vectors, often leads confusing code, writer   reader must remember value corresponds argument; example,   \"third element lower bound vector alphaLeaf.\" purpose bounds_table make process specifying bounds   simpler easier follow. expected function called   objective_function.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/bounds_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table of lower and upper bounds — bounds_table","text":"","code":"bounds_table(     independent_args,     bounds_list,     initial_ind_arg_values = NULL   )"},{"path":"https://biocro.github.io/BioCroValidation/reference/bounds_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table of lower and upper bounds — bounds_table","text":"independent_args value passed objective_function. bounds_list list named elements, element numeric vector length     2. names correspond independent arguments, values     indicate lower upper bounds corresponding parameter (    order). \"extra\" bounds (, bounds correspond     independent argument) ignored. initial_ind_arg_values numeric vector initial values independent arguments,     supplied order independent_args.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/bounds_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a table of lower and upper bounds — bounds_table","text":"main purpose function create vectors lower upper   bounds, returned columns data frame.   independent argument independent_args, bounds supplied via   bounds_list input. syntax designed code calling   function easy human parse. (See example .) also (optionally) possible provide initial guess   independent argument via initial_ind_arg_values argument.   provided, checked make sure lie outside   bounds; error thrown lie outside bounds. warning   also thrown initial guesses lie bounds, since can   problematic optimizers, nmkb. optimizers, DEoptim, require   initial guess; case, strong need pass initial guess   bounds_table.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/bounds_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table of lower and upper bounds — bounds_table","text":"data frame three four columns: arg_name, lower,   upper, (optionally) initial_value. lower upper columns lower upper bounds,   determined bounds_list. arg_name column argument   name, rows table ordered independent_args.   initial_value column contains initial values,   provided via initial_ind_arg_values argument.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/bounds_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table of lower and upper bounds — bounds_table","text":"","code":"# Make a list of independent arguments; the values are not used for anything independent_args <- list(   alphaLeaf = 0,   alphaRoot = 0,   alphaStem = 0,   betaLeaf  = 0,   betaRoot  = 0,   betaStem  = 0 )  # Specify bounds and initial guess for each. Note that: # # - The bounds will be reordered to follow the same order as the #   `independent_args`, but the initial guess is assumed to already follow the #   same order as the `independent_args`. # # - The bounds for the two extra parameters are ignored when forming the table. # # - The lower and upper bounds can be supplied as (upper, lower) #   or (lower, upper) pairs. # b_ll <- -50 # Lower limit for beta parameters a_ul <- 50  # Upper limit for alpha parameters  bounds <- bounds_table(   independent_args,   list(     betaStem  = c(0, b_ll),     betaRoot  = c(0, b_ll),     betaLeaf  = c(0, b_ll),     alphaStem = c(0, a_ul),     alphaRoot = c(0, a_ul),     alphaLeaf = c(0, a_ul),     extraPar1 = c(0, 5),     extraPar2 = c(0, 6)   ),   c(1, 1, 1, -1, -1, -1) )  print(bounds) #>    arg_name lower upper initial_value #> 1 alphaLeaf     0    50             1 #> 2 alphaRoot     0    50             1 #> 3 alphaStem     0    50             1 #> 4  betaLeaf   -50     0            -1 #> 5  betaRoot   -50     0            -1 #> 6  betaStem   -50     0            -1  # Now the properly-ordered lower and upper limits can be accessed as follows: bounds$lower #> [1]   0   0   0 -50 -50 -50  bounds$lower #> [1]   0   0   0 -50 -50 -50"},{"path":"https://biocro.github.io/BioCroValidation/reference/objective_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an objective function for BioCro model validation — objective_function","title":"Generate an objective function for BioCro model validation — objective_function","text":"Given base model definition, drivers run model, observed values   model outputs, names model arguments vary,   objective_function creates objective function can passed   minimization algorithm order find optimal parameter values   produce best agreement model observed data. objective function based weighted least-squares error   metric, optional user-defined penalty terms, optional   regularization penalty term. possible define multi-year multi-location objective function   pairing particular sets drivers corresponding sets observed model   outputs. also possible include \"dependent\" model arguments, whose values   determined \"independent\" model arguments varied   parameterization procedure. detailed example using objective_function, see   \"Parameterizing Soybean-BioCro\" vignette/article.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/objective_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an objective function for BioCro model validation — objective_function","text":"","code":"objective_function(     base_model_definition,     data_driver_pairs,     independent_args,     quantity_weights,     data_definitions = list(),     normalization_method = 'mean_max',     normalization_param = NULL,     stdev_weight_method = 'equal',     stdev_weight_param = NULL,     regularization_method = 'none',     dependent_arg_function = NULL,     post_process_function = NULL,     extra_penalty_function = NULL,     verbose_startup = TRUE   )"},{"path":"https://biocro.github.io/BioCroValidation/reference/objective_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an objective function for BioCro model validation — objective_function","text":"base_model_definition list meeting requirements BioCro     crop_model_definitions. data_driver_pairs list named elements, element \"data-driver pair.\"     data-driver pair list three required elements: data,     drivers, weight. Optionally, may also     data_stdev element. data element must data frame one column named     time, whose values follow BioCro's definition     time; columns represent observed     values model outputs. NA values data     ignored calculating error metric, non-NA values     columns (except time) compared model output. drivers element must data frame can passed     run_biocro drivers input argument. weight element must single numeric value indicating weight     used calculating error metric. optional data_stdev element must data frame     column names data, time values; entries     represent standard deviation associated entry     data. data_stdev supplied, standard deviations     set 1. independent_args list named numeric values. names determine independent     arguments varied optimization, values specify     \"initial\" \"test\" values argument used internally     check objective function properly defined can evaluated. quantity_weights list named numeric values, name element one     model outputs compared observed data, value     weight output. weight can single number, pair     numbers. weight pair, first number weight     used underestimates (modeled value smaller     observed value), second weight overestimates. data_definitions list named string values, name element one     data columns data_driver_pairs value column's     corresponding name model output. data columns     data_driver_pairs, assumed data column name matches     column model output. normalization_method string indicating normalization method used calculating     error metric; see details. normalization_param (optional) parameter value used normalization methods.     normalization_param NULL, default value used,     depends particular normalization method. Otherwise,     user-specified value used. See details . stdev_weight_method string indicating method used calculating     variance-based weights used error metric; see details. stdev_weight_param (optional) parameter value used normalization methods.     stdev_weight_param NULL, default value used,     depends particular normalization method. Otherwise,     user-specified value used. See details . regularization_method string indicating regularization method used calculating     regularization penalty term; see details. dependent_arg_function function whose input argument named list independent argument     values, returns named list dependent argument values.     dependent_arg_function NULL, dependent argument values     calculated. post_process_function function whose input argument data frame representing output     run_biocro, returns data frame, typically     based input one new columns.     post_process_function NULL, post-processing     applied raw simulation output. extra_penalty_function function whose input argument data frame representing output     run_biocro, returns numeric penalty     added least-squares term calculating error metric.     extra_penalty_function NULL, extra penalties     added. verbose_startup logical (TRUE FALSE) value indicating whether print     additional information R terminal creating objective     function.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/objective_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an objective function for BioCro model validation — objective_function","text":"Overview parameterizing BioCro model, general idea vary subset   model's parameters achieve best agreement set observed   data. degree agreement expressed \"error metric,\"   includes terms derived agreement modeled observed   values, well (optional) penalty terms. function calculates   error metric given set parameter values called \"objective   function.\" Defining objective function suitable BioCro parameterization   can complicated, objective_function function helps   simplify process creating function. designed   accommodate following scenarios, often occur context   BioCro model parameterization:  Multi-year multi-location data: Often model needs           run several times different drivers corresponding multiple           years locations, results individual           simulation must compared associated sets observed data. ,           handled data_driver_pairs, allows           user specify drivers data sets compared           . Complicated normalization: Care must taken ensure           certain years output variables -valued error           metric; example, one year may observations leaf mass           another year, stem mass may much larger leaf           mass. , handled pre-set normalization approaches,           can specified normalization_method input.           See information. Extra penalties: Sometimes optimizer chooses parameters           produce close agreement observed data,           nevertheless biologically resonable. example, may produce           sharp peak high leaf mass two measured points,           reality, leaf mass nearly constant .           case, may necessarily add extra penalty objective           function prevents optimizer choosing values. ,           handled extra_penalty_function input. Flexible weights: Often user like specify weight           variable considered error metric, either           represent uncertainty emphasize agreement one output           expense another. example, seed mass may need high           weight prioritize accurate yield predictions. ,           weights may need differ underestimates compared           overestimates; example, measured root mass often lower           true root mass, user may wish penalize underestimates root           mass severely overestimates. , situations           handled quantity_weights           stdev_weight_method inputs. Dependent parameters: Sometimes one model parameter must           determined one parameters; example, user may           wish require leaf stem maintenance respiration           coefficients identical. , handled           dependent_arg_function, allows user specify           values \"dependent\" parameters determined           values \"independent\" parameters. Name mismatches: Often particular variable different           names data set simulation output. , handled           data_definitions, allows user specify           columns model output compared particular           columns observed data. Incomplete outputs: Sometimes model may produce outputs           directly comparable observed values; example,           model may calculate seed shell mass, data set includes pod           mass, sum seed shell. , handled           optional post_process_function, allows users specify           additional operations perform model output; example,           used calculate pod mass can compared           observations. Error metric calculations mentioned , overall error metric \\(E\\) calculated $$E = E_{agreement} + P_{user} + P_{regularization},$$   \\(E_{agreement}\\) determined agreement model   observations, \\(P_{user}\\) optional user-defined penalty,   \\(P_{regularization}\\) optional regularization penalty. terms   explained detail :  Agreement term: agreement term \\(E_{agreement}\\)           calculated using least-squares approach. words, $$E_{agreement} = \\sum_i \\left(Y_{obs}^- Y_{mod}^\\right)^2%           \\cdot \\frac{w_i^{quantity} w_i^{data} w_i^{stdev}}{N_i},$$           sum runs \\(n\\) observations; \\(Y_{obs}^\\)           \\(Y_{mod}^\\) observed modeled values variable \\(Y_i\\);           \\(w_i^{quantity}\\), \\(w_i^{data}\\), \\(w_i^{stdev}\\)           weight factors depend name \\(Y_i\\), data set           includes \\(^{th}\\) observation, standard deviation           associated \\(Y_{obs}^\\), respectively; \\(N_i\\)           normalization factor. value \\(Y_{obs}^\\) specified particular time           \\(t_i\\). corresponding modeled value, \\(Y_{mod}^\\), found           retrieving value \\(Y_i\\) variable closest time           \\(t_i\\) included model output. assumed           model always outputs sequence time values time           run particular set drivers, regardless input           argument values. quantity-based weight factors \\(w_i^{quantity}\\) directly           specified user via quantity_weights input.           example, quantity_weights element named Leaf           equal 0.5, \\(w_i\\) equal 0.5 whenever           \\(Y_i\\) represents leaf mass value, regardless set           drivers time point corresponds \\(Y_i\\). weights can also           supplied \\((w_{}, w_{})\\) pairs instead single           values; case, value \\(w_i\\) depends whether           model makes underprediction overprediction:           \\(w_i = w_{}\\) \\(Y_{mod}^< Y_{obs}^\\)           \\(w_i = w_{}\\) otherwise. data-set-based weight factors \\(w_i^{data}\\) directly           specified user via weight element           data-driver pair. example, second element           data_driver_pairs weight 2.0,           \\(w_i^{data}\\) equal 2.0 observations           corresponding data set. standard-deviation-based weight factors \\(w_i^{stdev}\\)           determined choice stdev_weight_method; available           methods discussed . normalization factors \\(N_i\\) determined choice           normalization_method; available methods discussed           . special cases \\(E_{agreement}\\) set           high value (BioCroValidation:::FAILURE_VALUE).           done simulation fails run, \\(E_{agreement}\\) term           otherwise evaluate NA, \\(E_{agreement}\\)           term otherwise evaluate infinite value. User-defined penalty term: user-defined penalty term           \\(P_{user}\\) calculated applying function \\(f_{user}\\)           full simulation output set drivers. words, $$P_{user} = \\sum_k f_{user} \\left( M_k \\right),$$           sum runs \\(k\\) sets drivers \\(M_k\\)           model output run \\(k^{th}\\) set drivers. function \\(f_{user}\\) must accept single data frame           input return single numeric value output,           requirements. specified via           extra_penalty_function argument.           extra_penalty_function NULL, \\(P_{user}\\) zero. Regularization penalty term: regularization penalty term           \\(P_{regularization}\\) calculated values           arguments varied optimization applying function           \\(R\\). words, $$P_{regularization} = R \\left( X \\right),$$           \\(X\\) represents model argument values. function \\(R\\) determined choice           regularization_method; available methods discussed           . Standard-deviation-based weight methods following methods available determining weight factors values   standard deviation (\\(\\sigma\\)), can (optionally) supplied   via data_stdev elements data_driver_pairs:  'equal': method, \\(w_i^{stdev}\\) always set           1. words, variances treated equal,           regardless user-supplied values. usually best           choice values \\(\\sigma\\) unavailable           estimated. 'logarithm': method, \\(w_i^{stdev}\\) calculated           $$w_i^{stdev} =%           ln \\left( \\frac{1}{\\sigma_i + \\epsilon} \\right),$$           \\(ln\\) denotes logarithm base \\(e\\)           \\(\\epsilon\\) small number included prevent numerical errors           otherwise occur \\(\\sigma = 0\\). method           used original Soybean-BioCro paper. value \\(\\epsilon\\) specified           stdev_weight_param input argument, defaults           1e-5 stdev_weight_param NULL using           method. default value \\(\\epsilon\\),           \\(w_i^{stdev} \\approx 11.512\\) \\(\\sigma = 0\\). Note: method used caution,           \\(w_i^{stdev}\\) zero \\(\\sigma_i = 1 - \\epsilon\\),           becomes negative larger values \\(\\sigma_i\\). 'inverse': method, \\(w_i^{stdev}\\) calculated $$w_i^{stdev} = \\frac{1}{\\sigma_i^2 + \\epsilon},$$           \\(\\epsilon\\) small number included prevent numerical           errors otherwise occur \\(\\sigma_i = 0\\). value \\(\\epsilon\\) specified           stdev_weight_param input argument, defaults           1e-1 stdev_weight_param NULL using           method. default value \\(\\epsilon\\),           \\(w_i^{stdev} = 10\\) \\(\\sigma_i = 0\\). values \\(w_i^{stdev}\\) undefined, negative, infinite,   error message occur (see \"Input checks\" section ). Normalization methods following normalization methods available:  'equal': method, \\(N_i\\) always set 1.           words, normalization performed. 'mean': method, \\(Y_i\\) named vtype           observation set called vdata, $$N_i = n_{vtype}^{vdata} \\cdot n_{data},$$           \\(n_{vtype}^{vdata}\\) number observations type           vtype included vdata \\(n_{data}\\)           total number data-driver pairs. case, error term           \\(E_{agreement}\\) becomes mean error across full set           drivers, hence name method. approach avoids           -representing drivers larger numbers associated           observations determining \\(E_{agreement}\\). also preserves           overall magnitude \\(E_{agreement}\\) data-driver pairs           added. 'max': method, \\(Y_i\\) named vtype           observation set called vdata, $$N_i = \\left( max_{vtype}^{vdata} \\right)^2,$$           \\(max_{vtype}^{vdata}\\) maximum observed value           vtype across vdata. case, observed           modeled values appear equation \\(E_{agreement}\\)           essentially normalized maximum value, hence name           method. approach avoids -representing variable types           larger magnitude determining \\(E_{agreement}\\). 'obs': method, $$N_i = \\left( Y_{obs}^\\right)^2 + \\epsilon,$$           \\(\\epsilon\\) small number included prevent numerical           errors otherwise occur \\(Y_{obs}^= 0\\).           case, equation \\(E_{agreement}\\) essentially uses relative           differences rather absolute differences, achieved           normalizing observed values, hence name. approach           avoids -representing time points particular quantity takes           largest values determining \\(E_{agreement}\\). value \\(\\epsilon\\) specified           normalization_param input argument, defaults           1e-1 normalization_param NULL using           method. default value \\(\\epsilon\\), \\(N_i = 10\\)           \\(Y_{obs}^= 0\\). 'mean_max': method, \"mean\" \"max\" methods           combined $$N_i = n_{vtype}^{vdrivers}%           \\cdot n_{data} \\cdot \\left( max_{vtype}^{vdata} \\right)^2.$$           approach avoids -representing drivers larger numbers           associated observations, variable types larger magnitudes.           method used parameterizing Soybean-BioCro. 'mean_obs': method, \"mean\" \"obs\" methods           combined $$N_i = n_{vtype}^{vdrivers} \\cdot n_{data}%           \\cdot \\left( \\left( Y_{obs}^\\right)^2 + \\epsilon \\right)^2.$$           approach avoids -representing drivers larger numbers           associated observations, time points larger observed values. value \\(\\epsilon\\) specified           normalization_param input argument, defaults           1e-1 normalization_param NULL using           method. default value \\(\\epsilon\\),           \\(N_i = 10 \\cdot n_{vtype}^{vdrivers} \\cdot n_{data}\\)           \\(Y_{obs}^= 0\\). situations, recommended use either 'mean_max'   'mean_obs' depending user preference performance. Regularization methods following regularization methods available:  'none': method, \\(P_{regularization}\\) always set           0. words, regularization performed. 'L1' 'lasso': method,           \\(P_{regularization}\\) given sum absolute values           independent argument, multiplied \"regularization parameter\"           \\(\\lambda\\) sets overall weight penalty: $$P_{regularization} = \\lambda \\sum_j | X_j |,$$           sum runs \\(j\\) independent arguments,           \\(X_j\\) value \\(j^{th}\\) argument. See \"Value\"           section details specify \\(\\lambda\\). 'L2' 'ridge': method,           \\(P_{regularization}\\) given sum squared values           independent argument, multiplied \"regularization parameter\"           \\(\\lambda\\) sets overall weight penalty: $$P_{regularization} = \\lambda \\sum_j X_j^2,$$           sum runs \\(j\\) independent arguments,           \\(X_j\\) value \\(j^{th}\\) argument. See \"Value\"           section details specify \\(\\lambda\\). Input checks Several checks made ensure objective function properly   defined. checks include, limited , following:  Ensuring set drivers data_driver_pairs defines           valid dynamical system along base_model_definition.           accomplished using           validate_dynamical_system_inputs. Ensuring model output corresponding set drivers           spans times observations made. Ensuring variable type data elements           data_driver_pairs matches corresponding column model           output, accounting data_definitions           post_process_function. Ensuring independent dependent argument name either           parameter initial value model. Internally, argument names           passed partial_run_biocro via           arg_names input. Note argument names passed           partial_run_biocro can technically include drivers,           unlikely value driver varied           optimization, argument names allowed include           columns drivers. Ensuring optional dependent_arg_function,           post_process_function, extra_penalty_function           functions can run without causing errors. Ensuring certain values finite (\\(Y_{obs}\\),           \\(\\sigma_i\\), \\(w_i^{stdev}\\), \\(N_i\\)), certain           values negative (\\(\\sigma_i\\), \\(w_i^{stdev}\\),           \\(N_i\\)). issues detected, informative error message sent. Note   several checks require running model set   drivers. checks, argument values specified   independent_args used, valid otherwise   reasonable values. error message occurs verbose_startup set   FALSE, recommended call function   verbose_startup set TRUE, since additional output can   helpful troubleshooting.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/objective_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an objective function for BioCro model validation — objective_function","text":"function obj_fun signature   obj_fun(x, lambda = 0, return_terms = FALSE, debug_mode = FALSE). , x numeric vector values independent arguments (  order independent_arg_names), lambda   value regularization parameter. return_terms argument determines return value   obj_fun. return_terms FALSE, obj_fun   returns values error metric \\(E\\). return_terms   TRUE, obj_fun returns list including individual term   total error metric. optimization, return_terms always FALSE.   Setting TRUE can useful troubleshooting,   diagnostics checking quality fit data-driver   pairs. debug_mode argument determines whether obj_fun running   debug mode. debug mode, time obj_fun called, print   values x error metric R terminal. can   useful troubleshooting problem optimization, since provides   record problematic parameter combinations. setting   debug_mode TRUE, also consider using sink   write outputs file instead R terminal. case,   still record even R crashes.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/objective_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an objective function for BioCro model validation — objective_function","text":"","code":"# Example: Create an objective function that enables optimization of the # `alphaLeaf`, `betaLeaf`, and `alphaStem` parameters of the Soybean-BioCro # model. Additional details are provided below. Important note: This example is # designed to highlight key features of `objective_function`, and is not # necessarily realistic.  if (require(BioCro)) {   # We will use Soybean-BioCro as the base model definition, but we will change   # the ODE solver to use the Euler method so the model runs faster.   base_model_definition            <- BioCro::soybean   base_model_definition$ode_solver <- BioCro::default_ode_solvers[['homemade_euler']]    # We will use the `soyface_biomass` data set (included with the   # `BioCroValidation` package) for the observed values; this set includes   # observations of leaf, stem, and pod biomass from two years, which are stored   # in two data tables; it also includes the standard deviations of the measured   # biomasses, which are included in two separate tables. However, these data   # tables each have a `DOY` column rather than a `time` column, so we need to   # alter them. The tables also include other columns we do not wish to use in   # this example. So, we will define a short helper function that can be used to   # pre-process each table.   process_table <- function(x) {     within(x, {       # Define new `time` column       time = (DOY - 1) * 24.0        # Remove unneeded columns       DOY                 = NULL       Seed_Mg_per_ha      = NULL       Litter_Mg_per_ha    = NULL       CumLitter_Mg_per_ha = NULL     })   }    # The data-driver pairs can now be created by associating each data set with   # its corresponding weather data. Here we will weight the 2005 data twice as   # heavily as the 2002 data.   data_driver_pairs <- list(     ambient_2002 = list(       data       = process_table(soyface_biomass[['ambient_2002']]),       data_stdev = process_table(soyface_biomass[['ambient_2002_std']]),       drivers    = BioCro::soybean_weather[['2002']],       weight     = 1     ),     ambient_2005 = list(       data       = process_table(soyface_biomass[['ambient_2005']]),       data_stdev = process_table(soyface_biomass[['ambient_2005_std']]),       drivers    = BioCro::soybean_weather[['2005']],       weight     = 2     )   )    # In the data, the leaf biomass is in the `Leaf_Mg_per_ha` column, but in the   # simulation output, it is in the `Leaf` column. Similar naming differences   # occur for the stem and pod mass. To address this, we can provide a data   # definition list.   data_definitions <- list(     Leaf_Mg_per_ha = 'Leaf',     Stem_Mg_per_ha = 'Stem',     Rep_Mg_per_ha = 'Pod'   )    # The data contains values of pod mass, but the model does not calculate pod   # mass; instead, it returns separate values of `Grain` (seed) and `Shell`   # mass, two components which form the pod together. To address this, we can   # provide a post-processing function to calculate the pod mass.   post_process_function <- function(sim_res) {     within(sim_res, {Pod = Grain + Shell})   }    # Here we wish to independently vary the `alphaLeaf` and `betaLeaf`   # parameters. We also wish to vary `alphaStem`, but require that its value is   # always equal to `alphaLeaf`. To do this, we can specify independent   # arguments, and a function for determining dependent argument values. We will   # choose \"test\" values of the independent arguments as their values in the   # original Soybean-BioCro model.   independent_args <- BioCro::soybean[['parameters']][c('alphaLeaf', 'betaLeaf')]    dependent_arg_function <- function(ind_args) {     list(alphaStem = ind_args[['alphaLeaf']])   }    # When determining the error metric value, we wish to weight the pod highest   # to ensure a close fit to the observed pod masses. We also wish to decrease   # the penalty for overestimates of the stem mass, since we believe our   # observations to be underestimates.   quantity_weights <- list(     Leaf = 0.5,     Stem = c(0.5, 0.25),     Pod = 1   )    # We want to prevent the optimizer from choosing parameters that produce   # unreasonably high leaf mass   extra_penalty_function <- function(sim_res) {     max_leaf <- max(sim_res[['Leaf']], na.rm = TRUE)      if (is.na(max_leaf) || max_leaf > 4) {       1e5 # Add a steep penalty     } else {       0     }   }    # Now we can finally create the objective function   obj_fun <- objective_function(     base_model_definition,     data_driver_pairs,     independent_args,     quantity_weights,     data_definitions = data_definitions,     stdev_weight_method = 'logarithm',     dependent_arg_function = dependent_arg_function,     post_process_function = post_process_function,     extra_penalty_function = extra_penalty_function   )    # This function could now be passed to an optimizer; here we will simply   # evaluate it for two sets of parameter values.    # Try doubling each parameter value; in this case, the value of the   # objective function increases, indicating a lower degree of agreement between   # the model and the observed data. Here we will call `obj_fun` in debug mode,   # which will automatically print the value of the error metric.   cat('\\nError metric calculated by doubling the initial argument values:\\n')   error_metric <- obj_fun(2 * as.numeric(independent_args), debug_mode = TRUE)    # We can also see the values of each term that makes up the error metric;   # again, we will call `obj_fun` in debug mode for automatic printing.   cat('\\nError metric terms calculated by doubling the initial argument values:\\n')   error_terms <-     obj_fun(2 * as.numeric(independent_args), return_terms = TRUE, debug_mode = TRUE) } #> Loading required package: BioCro #>  #> The independent arguments and their initial values: #>  #> List of 2 #>  $ alphaLeaf: num 23.9 #>  $ betaLeaf : num -18.1 #>  #> The dependent arguments and their initial values: #>  #> List of 1 #>  $ alphaStem: num 23.9 #>  #> The full data definitions: #>  #> List of 3 #>  $ Leaf_Mg_per_ha: chr \"Leaf\" #>  $ Stem_Mg_per_ha: chr \"Stem\" #>  $ Rep_Mg_per_ha : chr \"Pod\" #>  #> The user-supplied data in long form: #>  #> $ambient_2002 #>    time quantity_name quantity_value quantity_stdev time_index expected_npts #> 1  4272          Leaf   0.1802843394   0.0408155501        649          3288 #> 2  4512          Leaf   0.5544619422   0.1638632739        889          3288 #> 3  4848          Leaf   1.3265529308   0.1337744335       1225          3288 #> 4  5184          Leaf   1.6979440069   0.2283266576       1561          3288 #> 5  5520          Leaf   1.8077427820   0.2024754215       1897          3288 #> 6  5880          Leaf   1.5788136482   0.0754751654       2257          3288 #> 7  6192          Leaf   0.9475377733   0.3445500325       2569          3288 #> 8  6888          Leaf   0.0000000000   0.0000000000       3265          3288 #> 9  4272          Stem   0.0852449694   0.0170797372        649          3288 #> 10 4512          Stem   0.4188538932   0.1384490248        889          3288 #> 11 4848          Stem   1.7110673664   0.1837107594       1225          3288 #> 12 5184          Stem   2.8928258965   0.4487440652       1561          3288 #> 13 5520          Stem   3.6859142604   0.4534474707       1897          3288 #> 14 5880          Stem   3.7452607171   0.2753213561       2257          3288 #> 15 6192          Stem   3.6184015745   0.1510453777       2569          3288 #> 16 6888          Stem   2.3057012247   0.1483892609       3265          3288 #> 17 4272           Pod   0.0000000000   0.0000000000        649          3288 #> 18 4512           Pod   0.0000000000   0.0000000000        889          3288 #> 19 4848           Pod   0.0003171479   0.0005493162       1225          3288 #> 20 5184           Pod   0.0793963255   0.0309899985       1561          3288 #> 21 5520           Pod   1.5545713035   0.2184025435       1897          3288 #> 22 5880           Pod   3.9760135605   0.5735488281       2257          3288 #> 23 6192           Pod   6.5446506556   0.7434407011       2569          3288 #> 24 6888           Pod   7.0089676285   0.1418286169       3265          3288 #>         norm      w_var #> 1   52.28694  3.1984472 #> 2   52.28694  1.8086619 #> 3   52.28694  2.0115255 #> 4   52.28694  1.4769342 #> 5   52.28694  1.5970874 #> 6   52.28694  2.5838191 #> 7   52.28694  1.0654869 #> 8   52.28694 11.5129255 #> 9  224.43165  4.0692772 #> 10 224.43165  1.9771808 #> 11 224.43165  1.6943383 #> 12 224.43165  0.8012803 #> 13 224.43165  0.7908538 #> 14 224.43165  1.2897800 #> 15 224.43165  1.8901088 #> 16 224.43165  1.9078489 #> 17 786.01004 11.5129255 #> 18 786.01004 11.5129255 #> 19 786.01004  7.4887956 #> 20 786.01004  3.4737681 #> 21 786.01004  1.5213696 #> 22 786.01004  0.5558948 #> 23 786.01004  0.2964528 #> 24 786.01004  1.9530654 #>  #> $ambient_2005 #>    time quantity_name quantity_value quantity_stdev time_index expected_npts #> 1  4104          Leaf     0.22227188     0.03289659        577          2952 #> 2  4440          Leaf     0.84603750     0.14679830        913          2952 #> 3  4776          Leaf     1.18446563     0.33807429       1249          2952 #> 4  5112          Leaf     2.21805938     0.15217591       1585          2952 #> 5  5448          Leaf     2.14744687     0.11907759       1921          2952 #> 6  5784          Leaf     1.51948125     0.51280870       2257          2952 #> 7  6120          Leaf     0.06575625     0.06168624       2593          2952 #> 8  6456          Leaf     0.00000000     0.00000000       2929          2952 #> 9  4104          Stem     0.18880312     0.01431814        577          2952 #> 10 4440          Stem     0.85220625     0.19883006        913          2952 #> 11 4776          Stem     1.61896875     0.60528625       1249          2952 #> 12 5112          Stem     4.04361563     0.55987405       1585          2952 #> 13 5448          Stem     4.47772500     0.30674464       1921          2952 #> 14 5784          Stem     3.89208750     0.37910849       2257          2952 #> 15 6120          Stem     2.89905000     0.22082398       2593          2952 #> 16 6456          Stem     2.17560000     0.24325473       2929          2952 #> 17 4104           Pod     0.00000000     0.00000000        577          2952 #> 18 4440           Pod     0.00000000     0.00000000        913          2952 #> 19 4776           Pod     0.00000000     0.00000000       1249          2952 #> 20 5112           Pod     0.29925000     0.16427520       1585          2952 #> 21 5448           Pod     2.30455312     0.43414807       1921          2952 #> 22 5784           Pod     5.53277813     0.58847698       2257          2952 #> 23 6120           Pod     5.37107813     0.52004438       2593          2952 #> 24 6456           Pod     6.37225313     0.63309086       2929          2952 #>        norm      w_var #> 1   78.7166  3.4140824 #> 2   78.7166  1.9186276 #> 3   78.7166  1.0844600 #> 4   78.7166  1.8826524 #> 5   78.7166  2.1278960 #> 6   78.7166  0.6678329 #> 7   78.7166  2.7855322 #> 8   78.7166 11.5129255 #> 9  320.8003  4.2455301 #> 10 320.8003  1.6152545 #> 11 320.8003  0.5020373 #> 12 320.8003  0.5800256 #> 13 320.8003  1.1817071 #> 14 320.8003  0.9699065 #> 15 320.8003  1.5103441 #> 16 320.8003  1.4136050 #> 17 649.6898 11.5129255 #> 18 649.6898 11.5129255 #> 19 649.6898 11.5129255 #> 20 649.6898  1.8061514 #> 21 649.6898  0.8343466 #> 22 649.6898  0.5302005 #> 23 649.6898  0.6538219 #> 24 649.6898  0.4571255 #>  #> The user-supplied quantity weights: #>  #> List of 3 #>  $ Leaf: num [1:2] 0.5 0.5 #>  $ Stem: num [1:2] 0.5 0.25 #>  $ Pod : num [1:2] 1 1 #>  #> The user-supplied data-driver pair weights: #>  #> List of 2 #>  $ ambient_2002: num 1 #>  $ ambient_2005: num 2 #>  #> The initial error metric terms: #>  #> List of 2 #>  $ terms_from_data_driver_pairs:List of 2 #>   ..$ ambient_2002:List of 2 #>   .. ..$ least_squares_terms:List of 3 #>   .. .. ..$ Leaf: num 0.0454 #>   .. .. ..$ Pod : num 0.00176 #>   .. .. ..$ Stem: num 0.0374 #>   .. ..$ extra_penalty      : num 0 #>   ..$ ambient_2005:List of 2 #>   .. ..$ least_squares_terms:List of 3 #>   .. .. ..$ Leaf: num 0.0477 #>   .. .. ..$ Pod : num 0.021 #>   .. .. ..$ Stem: num 0.0354 #>   .. ..$ extra_penalty      : num 0 #>  $ regularization_penalty      : num 0 #>  #> The initial error metric value: #>  #> [1] 0.1886707 #>  #> Error metric calculated by doubling the initial argument values: #>  #> Time: 2025-05-23 21:36:13.287143    Independent argument values: 47.779, -36.1702 #> Time: 2025-05-23 21:36:13.727492    Error metric: 1.63915459199451 #>  #> Error metric terms calculated by doubling the initial argument values: #>  #> Time: 2025-05-23 21:36:13.727646    Independent argument values: 47.779, -36.1702 #> Time: 2025-05-23 21:36:14.09831     Error metric terms: List of 2 #>  $ terms_from_data_driver_pairs:List of 2 #>   ..$ ambient_2002:List of 2 #>   .. ..$ least_squares_terms:List of 3 #>   .. .. ..$ Leaf: num 0.141 #>   .. .. ..$ Pod : num 0.154 #>   .. .. ..$ Stem: num 0.247 #>   .. ..$ extra_penalty      : num 0 #>   ..$ ambient_2005:List of 2 #>   .. ..$ least_squares_terms:List of 3 #>   .. .. ..$ Leaf: num 0.172 #>   .. .. ..$ Pod : num 0.179 #>   .. .. ..$ Stem: num 0.746 #>   .. ..$ extra_penalty      : num 0 #>  $ regularization_penalty      : num 0 #>"},{"path":"https://biocro.github.io/BioCroValidation/reference/soyface_biomass.html","id":null,"dir":"Reference","previous_headings":"","what":"SoyFACE Soybean Biomass Data — soyface_biomass","title":"SoyFACE Soybean Biomass Data — soyface_biomass","text":"Two years soybean biomass data collected SoyFACE facility   Champaign, IL 2002 2005 field seasons.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/soyface_biomass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SoyFACE Soybean Biomass Data — soyface_biomass","text":"","code":"soyface_biomass"},{"path":"https://biocro.github.io/BioCroValidation/reference/soyface_biomass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SoyFACE Soybean Biomass Data — soyface_biomass","text":"list four named elements, element data frame   following columns: DOY: day year Leaf_Mg_per_ha: Leaf biomass per area expressed Mg / ha Stem_Mg_per_ha: Stem biomass per area expressed Mg / ha Rep_Mg_per_ha: Pod biomass per area expressed Mg / ha Seed_Mg_per_ha: Seed biomass per area expressed Mg / ha Litter_Mg_per_ha: Mass leaf litter accumulated           harvests, expressed Mg / ha CumLitter_Mg_per_ha: Cumulative leaf litter biomass per aear           expressed Mg / ha elements named ambient_2002 ambient_2005 represent mean   biomass values measured plants grown ambient CO2 conditions   2002 2005, respectively. elements named ambient_2002_std ambient_2005_std   represent standard deviation biomass values measured plants grown   ambient CO2 conditions 2002 2005, respectively.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/soyface_biomass.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SoyFACE Soybean Biomass Data — soyface_biomass","text":"leaf, stem, pod data obtained several files   Soybean-BioCro GitHub repository: Data/SoyFACE_data/2002_ambient_biomass.csv Data/SoyFACE_data/2005_ambient_biomass.csv Data/SoyFACE_data/2002_ambient_biomass_std.csv Data/SoyFACE_data/2005_ambient_biomass_std.csv See repository information. leaf litter accumulated harvests obtained original   sources. cumulative leaf litter calculated amount accumulated   harvests. seed mass estimated fraction total pod   mass, using proportionality factors determined unpublished data collected   Champaign, Illinois 2021-2022. data tables published previously, used   parameterize Soybean-BioCro used et al. 2024   (doi:10.1093/insilicoplants/diae009 ).","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/update_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a BioCro model definition — update_model","title":"Update a BioCro model definition — update_model","text":"Following optimization, typically necessary update initial   values /parameters base model definition new values determined   optimization. update_model function helps streamline   process. expected function called   objective_function.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/update_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a BioCro model definition — update_model","text":"","code":"update_model(     base_model_definition,     independent_args,     new_ind_arg_values,     dependent_arg_function = NULL   )"},{"path":"https://biocro.github.io/BioCroValidation/reference/update_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a BioCro model definition — update_model","text":"base_model_definition value passed objective_function. independent_args value passed objective_function. new_ind_arg_values numeric vector representing new values independent arguments,     typically determined optimizer. dependent_arg_function value passed objective_function.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/update_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a BioCro model definition — update_model","text":"list based base_model_definition new values   initial_values parameters, specified elements   independent_args new_ind_arg_values.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/update_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a BioCro model definition — update_model","text":"","code":"if (require(BioCro)) {   # Update the default Soybean-BioCro model with new values of `Leaf` (an   # initial value) and `alphaStem` (a parameter)   base_model <- BioCro::soybean    new_model <- update_model(     base_model,     list(Leaf = 1, alphaLeaf = 2), # The values here will not be used     c(1000, 2000)                  # These are the actual new values   )    # Compare the two models   cat('\\n\\nComparing initial Leaf values:\\n')   print(base_model$initial_values$Leaf)   print(new_model$initial_values$Leaf)    cat('\\n\\nComparing alphaLeaf values:\\n')   print(base_model$parameters$alphaLeaf)   print(new_model$parameters$alphaLeaf) } #>  #>  #> Comparing initial Leaf values: #> [1] 0.06312 #> [1] 1000 #>  #>  #> Comparing alphaLeaf values: #> [1] 23.8895 #> [1] 2000"},{"path":"https://biocro.github.io/BioCroValidation/reference/write_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a BioCro model definition — write_model","title":"Generate a BioCro model definition — write_model","text":"facilitate creation validation new BioCro models,   write_model stores contents BioCro crop model definition   (see crop_model_definitions) R script make   modules parameter values human-readable.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/write_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a BioCro model definition — write_model","text":"","code":"write_model(     name,     direct_modules,     differential_modules,     initial_values,     parameters,     ode_solver   )"},{"path":"https://biocro.github.io/BioCroValidation/reference/write_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a BioCro model definition — write_model","text":"name string specifying name model. direct_modules list vector fully-qualified direct module names can passed     run_biocro direct_module_names     input argument. differential_modules list vector fully-qualified differential module names can     passed run_biocro     differential_module_names input argument. initial_values list named elements can passed     run_biocro initial_values input     argument. parameters list named elements can passed     run_biocro parameters input     argument. ode_solver list named elements can passed     run_biocro ode_solver input     argument.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/write_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a BioCro model definition — write_model","text":"function returns string file /O. Use   writeLines print output console, save   output. See examples . Note customary name R script   file name.R, name value provided function   .","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/write_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a BioCro model definition — write_model","text":"string containing new BioCro model definition R script.","code":""},{"path":"https://biocro.github.io/BioCroValidation/reference/write_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a BioCro model definition — write_model","text":"","code":"if (require(BioCro)) {   # Create a definition string for Soybean-BioCro   out <- with(BioCro::soybean, {write_model(     'test_soybean_model',     direct_modules,     differential_modules,     initial_values,     parameters,     ode_solver   )})    # Use writeLines to print to console   writeLines(out)    if (interactive()) {     # Use writeLines to save as a `.R` file     writeLines(out, \"./test_soybean_model.h\")   } } #> test_soybean_model <- list( #>     direct_modules = list( #>         \"BioCro:format_time\", #>         \"BioCro:stomata_water_stress_linear\", #>         \"BioCro:sla_linear\", #>         \"BioCro:parameter_calculator\", #>         \"BioCro:soybean_development_rate_calculator\", #>         \"BioCro:leaf_water_stress_exponential\", #>         \"BioCro:partitioning_coefficient_logistic\", #>         \"BioCro:soil_evaporation\", #>         \"BioCro:solar_position_michalsky\", #>         \"BioCro:shortwave_atmospheric_scattering\", #>         \"BioCro:incident_shortwave_from_ground_par\", #>         \"BioCro:height_from_lai\", #>         \"BioCro:canopy_gbw_thornley\", #>         \"BioCro:stefan_boltzmann_longwave\", #>         \"BioCro:ten_layer_canopy_properties\", #>         \"BioCro:ten_layer_c3_canopy\", #>         \"BioCro:ten_layer_canopy_integrator\", #>         \"BioCro:no_leaf_resp_neg_assim_partitioning_growth_calculator\", #>         \"BioCro:senescence_coefficient_logistic\", #>         \"BioCro:carbon_assimilation_to_biomass\" #>     ), #>     differential_modules = list( #>         \"BioCro:senescence_logistic\", #>         \"BioCro:maintenance_respiration\", #>         \"BioCro:partitioning_growth\", #>         \"BioCro:two_layer_soil_profile\", #>         \"BioCro:development_index\", #>         \"BioCro:thermal_time_linear\" #>     ), #>     ode_solver = list( #>         type = \"boost_rkck54\", #>         output_step_size = 1.000000, #>         adaptive_rel_error_tol = 1.000000e-04, #>         adaptive_abs_error_tol = 1.000000e-04, #>         adaptive_max_steps = 200 #>     ), #>     initial_values = list( #>         \"Leaf\" = 0.06312, #>         \"Stem\" = 0.00789, #>         \"Root\" = 0.00789, #>         \"Grain\" = 1e-05, #>         \"Shell\" = 1e-05, #>         \"LeafLitter\" = 0, #>         \"RootLitter\" = 0, #>         \"StemLitter\" = 0, #>         \"soil_water_content\" = 0.32, #>         \"cws1\" = 0.32, #>         \"cws2\" = 0.32, #>         \"DVI\" = -1, #>         \"TTc\" = 0, #>         \"Rhizome\" = 1e-07, #>         \"RhizomeLitter\" = 0 #>     ), #>     parameters = list( #>         \"soil_air_entry\" = -2.6, #>         \"soil_b_coefficient\" = 5.2, #>         \"soil_bulk_density\" = 1.35, #>         \"soil_clay_content\" = 0.34, #>         \"soil_field_capacity\" = 0.32, #>         \"soil_sand_content\" = 0.32, #>         \"soil_saturated_conductivity\" = 6.4e-05, #>         \"soil_saturation_capacity\" = 0.52, #>         \"soil_silt_content\" = 0.34, #>         \"soil_wilting_point\" = 0.2, #>         \"iSp\" = 3.5, #>         \"Sp_thermal_time_decay\" = 0, #>         \"LeafN\" = 2, #>         \"LeafN_0\" = 2, #>         \"vmax_n_intercept\" = 0, #>         \"vmax1\" = 110, #>         \"alphab1\" = 0, #>         \"alpha1\" = 0, #>         \"maturity_group\" = 3, #>         \"Tbase_emr\" = 10, #>         \"TTemr_threshold\" = 60, #>         \"Rmax_emrV0\" = 0.199, #>         \"Tmin_emrV0\" = 5, #>         \"Topt_emrV0\" = 31.5, #>         \"Tmax_emrV0\" = 45, #>         \"Tmin_R0R1\" = 5, #>         \"Topt_R0R1\" = 31.5, #>         \"Tmax_R0R1\" = 45, #>         \"Tmin_R1R7\" = 0, #>         \"Topt_R1R7\" = 21.5, #>         \"Tmax_R1R7\" = 38.7, #>         \"sowing_fractional_doy\" = 0, #>         \"alphaLeaf\" = 23.8895, #>         \"alphaStem\" = 24.8248, #>         \"betaLeaf\" = -18.0851, #>         \"betaStem\" = -18.5214, #>         \"alphaRoot\" = 36.967, #>         \"betaRoot\" = -40.1915, #>         \"alphaShell\" = 13.5955, #>         \"betaShell\" = -9.9809, #>         \"kRhizome_emr\" = 0, #>         \"rsec\" = 0.2, #>         \"soil_clod_size\" = 0.04, #>         \"soil_reflectance\" = 0.2, #>         \"soil_transmission\" = 0.01, #>         \"specific_heat_of_air\" = 1010, #>         \"lat\" = 40, #>         \"longitude\" = -88, #>         \"atmospheric_pressure\" = 101325, #>         \"atmospheric_transmittance\" = 0.6, #>         \"atmospheric_scattering\" = 0.3, #>         \"par_energy_fraction\" = 0.5, #>         \"par_energy_content\" = 0.219, #>         \"heightf\" = 6, #>         \"min_gbw_canopy\" = 0.005, #>         \"dry_biomass_per_carbon\" = 30.026, #>         \"emissivity_sky\" = 1, #>         \"chil\" = 0.81, #>         \"k_diffuse\" = 0.7, #>         \"kpLN\" = 0, #>         \"leaf_reflectance_nir\" = 0.42, #>         \"leaf_reflectance_par\" = 0.1, #>         \"leaf_transmittance_nir\" = 0.42, #>         \"leaf_transmittance_par\" = 0.05, #>         \"lnfun\" = 0, #>         \"Gstar_c\" = 19.02, #>         \"Gstar_Ea\" = 37830, #>         \"Jmax_c\" = 17.57, #>         \"Jmax_Ea\" = 43540, #>         \"Kc_c\" = 38.05, #>         \"Kc_Ea\" = 79430, #>         \"Ko_c\" = 20.3, #>         \"Ko_Ea\" = 36380, #>         \"phi_PSII_0\" = 0.352, #>         \"phi_PSII_1\" = 0.022, #>         \"phi_PSII_2\" = -0.00034, #>         \"Rd_c\" = 18.72, #>         \"Rd_Ea\" = 46390, #>         \"theta_0\" = 0.76, #>         \"theta_1\" = 0.018, #>         \"theta_2\" = -0.00037, #>         \"Tp_c\" = 19.77399, #>         \"Tp_Ha\" = 62990, #>         \"Tp_Hd\" = 182140, #>         \"Tp_S\" = 588, #>         \"Vcmax_c\" = 26.35, #>         \"Vcmax_Ea\" = 65330, #>         \"jmax\" = 195, #>         \"jmax_mature\" = 195, #>         \"sf_jmax\" = 0.2, #>         \"electrons_per_carboxylation\" = 4.5, #>         \"electrons_per_oxygenation\" = 5.25, #>         \"tpu_rate_max\" = 13, #>         \"Rd\" = 1.28, #>         \"Catm\" = 372.59, #>         \"O2\" = 210, #>         \"b0\" = 0.008, #>         \"b1\" = 10.6, #>         \"Gs_min\" = 0.001, #>         \"windspeed_height\" = 5, #>         \"beta_PSII\" = 0.5, #>         \"leafwidth\" = 0.1, #>         \"growth_respiration_fraction\" = 0, #>         \"grc_stem\" = 0.02828, #>         \"grc_root\" = 0.0027, #>         \"mrc_leaf\" = 0.00048836, #>         \"mrc_stem\" = 0.00048836, #>         \"mrc_root\" = 1e-05, #>         \"mrc_grain\" = 1e-05, #>         \"retrans\" = 0.9, #>         \"retrans_rhizome\" = 1, #>         \"rateSeneLeaf\" = 0.012198, #>         \"rateSeneStem\" = 0.000117, #>         \"rateSeneRoot\" = 0, #>         \"rateSeneRhizome\" = 0, #>         \"alphaSeneLeaf\" = 48.32, #>         \"alphaSeneStem\" = 4.1937, #>         \"alphaSeneRoot\" = 10, #>         \"alphaSeneRhizome\" = 10, #>         \"betaSeneLeaf\" = -29.5393, #>         \"betaSeneStem\" = -3.3124, #>         \"betaSeneRoot\" = -10, #>         \"betaSeneRhizome\" = -10, #>         \"remobilization_fraction\" = 0.6, #>         \"soil_depth1\" = 0, #>         \"soil_depth2\" = 2.5, #>         \"soil_depth3\" = 10, #>         \"wsFun\" = 2, #>         \"hydrDist\" = 0, #>         \"rfl\" = 0.2, #>         \"rsdf\" = 0.44, #>         \"phi1\" = 0.01, #>         \"phi2\" = 1.5, #>         \"tbase\" = 10, #>         \"km_leaf_litter\" = 2, #>         \"timestep\" = 1 #>     ) #> )"},{"path":"https://biocro.github.io/BioCroValidation/news/index.html","id":"changes-in-biocrovalidation-version-020-2025-05-23","dir":"Changelog","previous_headings":"","what":"Changes in BioCroValidation Version 0.2.0 (2025-05-23)","title":"Changes in BioCroValidation Version 0.2.0 (2025-05-23)","text":"Added 2002 2005 SoyFACE biomass standard deviation data. Added several new functions: objective_function, update_model, bounds_table. Added two new vignettes: “Getting Started” article (BioCroValidation.Rmd) user guide illustrating perform model parameterization (parameterizing_soybean_biocro.Rmd).","code":""},{"path":"https://biocro.github.io/BioCroValidation/news/index.html","id":"changes-in-biocrovalidation-version-010","dir":"Changelog","previous_headings":"","what":"Changes in BioCroValidation Version 0.1.0","title":"Changes in BioCroValidation Version 0.1.0","text":"first version BioCroValidation. point, package state rapid development, changes described . reserving version 1.0.0 stable complete future release; , major changes increase minor version number.","code":""}]
